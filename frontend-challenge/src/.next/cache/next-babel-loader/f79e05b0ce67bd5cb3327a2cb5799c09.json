{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/bradtudor/Documents/interview_challenges/Frontend Challenge/frontend-challenge/src/hocs/withApolloClient.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { getDataFromTree } from '@apollo/react-ssr';\nimport Head from 'next/head';\nimport React from 'react';\nimport initApollo from '../services/apollo.service';\nexport default (App => {\n  var _class, _temp;\n\n  return _temp = _class = class Apollo extends React.Component {\n    static async getInitialProps(ctx) {\n      const {\n        AppTree\n      } = ctx;\n      const apollo = initApollo();\n\n      if (ctx.ctx) {\n        ctx.ctx.apolloClient = apollo;\n      }\n\n      let appProps = {};\n\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx);\n      } // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n\n\n      if (true) {\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(__jsx(AppTree, _extends({}, appProps, {\n            apolloClient: apollo,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 31\n            },\n            __self: this\n          })));\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          console.error('Error while running `getDataFromTree`', error);\n        } // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n\n\n        Head.rewind();\n      } // Extract query data from the Apollo store\n\n\n      const apolloState = apollo.cache.extract();\n      return _objectSpread({}, appProps, {\n        apolloState\n      });\n    }\n\n    constructor(props) {\n      super(props);\n      this.apolloClient = initApollo(props.apolloState);\n    }\n\n    render() {\n      return __jsx(App, _extends({\n        apolloClient: this.apolloClient\n      }, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }));\n    }\n\n  }, _defineProperty(_class, \"displayName\", 'withApollo(App)'), _temp;\n});","map":{"version":3,"sources":["/Users/bradtudor/Documents/interview_challenges/Frontend Challenge/frontend-challenge/src/hocs/withApolloClient.tsx"],"names":["getDataFromTree","Head","React","initApollo","App","Apollo","Component","getInitialProps","ctx","AppTree","apollo","apolloClient","appProps","error","console","rewind","apolloState","cache","extract","constructor","props","render"],"mappings":";;;;;;;;;;;;;;;AAAA,SAASA,eAAT,QAAgC,mBAAhC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,UAAP,MAAuB,4BAAvB;AAEA,gBAAgBC,GAAD,IAAc;AAAA;;AAC3B,0BAAO,MAAMC,MAAN,SAAqBH,KAAK,CAACI,SAA3B,CAAqC;AAI1C,iBAAoBC,eAApB,CAAoCC,GAApC,EAA8C;AAC5C,YAAM;AAAEC,QAAAA;AAAF,UAAcD,GAApB;AACA,YAAME,MAAM,GAAGP,UAAU,EAAzB;;AACA,UAAIK,GAAG,CAACA,GAAR,EAAa;AACXA,QAAAA,GAAG,CAACA,GAAJ,CAAQG,YAAR,GAAuBD,MAAvB;AACD;;AAED,UAAIE,QAAQ,GAAG,EAAf;;AACA,UAAIR,GAAG,CAACG,eAAR,EAAyB;AACvBK,QAAAA,QAAQ,GAAG,MAAMR,GAAG,CAACG,eAAJ,CAAoBC,GAApB,CAAjB;AACD,OAV2C,CAY5C;AACA;;;AAEA,gBAAmC;AACjC,YAAI;AACF;AACA,gBAAMR,eAAe,CACnB,MAAC,OAAD,eAAaY,QAAb;AAAuB,YAAA,YAAY,EAAEF,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADmB,CAArB;AAGD,SALD,CAKE,OAAOG,KAAP,EAAc;AACd;AACA;AACA;AACAC,UAAAA,OAAO,CAACD,KAAR,CAAc,uCAAd,EAAuDA,KAAvD;AACD,SAXgC,CAajC;AACA;;;AACAZ,QAAAA,IAAI,CAACc,MAAL;AACD,OA/B2C,CAiC5C;;;AACA,YAAMC,WAAW,GAAGN,MAAM,CAACO,KAAP,CAAaC,OAAb,EAApB;AAEA,+BACKN,QADL;AAEEI,QAAAA;AAFF;AAID;;AAEMG,IAAAA,WAAP,CAAmBC,KAAnB,EAA+B;AAC7B,YAAMA,KAAN;AACA,WAAKT,YAAL,GAAoBR,UAAU,CAACiB,KAAK,CAACJ,WAAP,CAA9B;AACD;;AAEMK,IAAAA,MAAP,GAAgB;AACd,aAAO,MAAC,GAAD;AAAK,QAAA,YAAY,EAAE,KAAKV;AAAxB,SAA0C,KAAKS,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;AArDyC,GAA5C,yCAC8B,iBAD9B;AAuDD,CAxDD","sourcesContent":["import { getDataFromTree } from '@apollo/react-ssr';\nimport Head from 'next/head';\nimport React from 'react';\n\nimport initApollo from '../services/apollo.service';\n\nexport default (App: any) => {\n  return class Apollo extends React.Component {\n    public static displayName = 'withApollo(App)';\n    public apolloClient: any;\n\n    public static async getInitialProps(ctx: any) {\n      const { AppTree } = ctx;\n      const apollo = initApollo();\n      if (ctx.ctx) {\n        ctx.ctx.apolloClient = apollo;\n      }\n\n      let appProps = {};\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx);\n      }\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n\n      if (typeof window === 'undefined') {\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(\n            <AppTree {...appProps} apolloClient={apollo} />,\n          );\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          console.error('Error while running `getDataFromTree`', error);\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind();\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apollo.cache.extract();\n\n      return {\n        ...appProps,\n        apolloState,\n      };\n    }\n\n    public constructor(props: any) {\n      super(props);\n      this.apolloClient = initApollo(props.apolloState);\n    }\n\n    public render() {\n      return <App apolloClient={this.apolloClient} {...this.props} />;\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}