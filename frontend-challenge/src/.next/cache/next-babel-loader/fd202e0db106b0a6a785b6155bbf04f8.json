{"ast":null,"code":"var _jsxFileName = \"/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/pages/HomePage/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Layout from '../../components/Layout/Layout';\nimport FilterMenu from '../../components/FilterMenu/FilterMenu';\nimport BottomBar from '../../components/BottomBar/BottomBar';\nimport { useQuery } from '@apollo/react-hooks';\nimport { PROGRAM_SEARCH } from '../../graphQL/queries';\nimport { Spinner } from '../../components/Spinner/Spinner';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { ResultsHeader, ProgramContainer } from './HomePage.styles';\nimport ProgramRow from '../../components/ProgramRow/ProgramRow'; //TODO: Build the home page\n\n/*\n\n\n  renderProgramContainer:  \n    *Finish the function renderHeader.  If a search term is present, it should return\n    \"129 Items For Engineering!\" where 129 is the number of items and engineering is the search term.\n    If the term is not present, it should return \"300 Items Found!\" where 129 is the total number of items.\n\n    *Render the list of programs under the results header\n\n  HomePage:\n    *  When the home page compoent renders it should trigger the PROGRAM_SEARCH query.\n       The graphQL query PROGRAM_SEARCH accepts the following variables:\n       offset, limit, term, and filter.  It returns two items, count & programs.\n       run the query and render out the home page.\n\n      term \n\n    *  Inside of the layout component render the FilterMenu, ProgramContainer, and BottomBar\n*/\n\nconst renderProgramContainer = (programs, count, term = null) => {\n  // Create a function to render \n  const renderPrograms = programs => programs.map((program, i) => __jsx(ProgramRow, {\n    key: program.id + program.name + i,\n    program: program,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }));\n\n  const renderHeader = (count, term) => term ? `${count} items found for ${term}!` : `${count} items found!`;\n\n  return __jsx(ProgramContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, __jsx(ResultsHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, renderHeader(count, term)), renderPrograms(programs));\n};\n\nconst HomePage = () => {\n  let count = 0;\n  let programs = [];\n  const itemsPerPage = 10;\n  const {\n    0: page,\n    1: setPage\n  } = useState(1);\n  const term = useSelector(state => state.term, shallowEqual);\n  const filter = useSelector(state => state.filter, shallowEqual);\n  let variables = {\n    data: {\n      offset: (page - 1) * itemsPerPage,\n      limit: itemsPerPage,\n      term,\n      filter\n    }\n  };\n  const {\n    loading,\n    data\n  } = useQuery(PROGRAM_SEARCH, {\n    variables\n  });\n\n  if (!loading) {\n    count = data.programSearch.count;\n    programs = data.programSearch.programs;\n  }\n\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, __jsx(FilterMenu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }), loading ? __jsx(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }) : renderProgramContainer(programs, count, term), __jsx(BottomBar, {\n    count: count,\n    page: page,\n    setPage: setPage,\n    itemsPerPage: itemsPerPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }));\n};\n\nexport default HomePage;","map":{"version":3,"sources":["/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/pages/HomePage/index.tsx"],"names":["React","useState","Layout","FilterMenu","BottomBar","useQuery","PROGRAM_SEARCH","Spinner","useSelector","shallowEqual","ResultsHeader","ProgramContainer","ProgramRow","renderProgramContainer","programs","count","term","renderPrograms","map","program","i","id","name","renderHeader","HomePage","itemsPerPage","page","setPage","state","filter","variables","data","offset","limit","loading","programSearch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Layout from '../../components/Layout/Layout';\nimport FilterMenu from '../../components/FilterMenu/FilterMenu';\nimport BottomBar from '../../components/BottomBar/BottomBar';\nimport { useQuery, useLazyQuery } from '@apollo/react-hooks';\nimport { PROGRAM_SEARCH } from '../../graphQL/queries';\nimport { Spinner } from '../../components/Spinner/Spinner';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { ResultsHeader, ProgramContainer } from './HomePage.styles';\nimport ProgramRow from '../../components/ProgramRow/ProgramRow';\n\n//TODO: Build the home page\n/*\n\n\n  renderProgramContainer:  \n    *Finish the function renderHeader.  If a search term is present, it should return\n    \"129 Items For Engineering!\" where 129 is the number of items and engineering is the search term.\n    If the term is not present, it should return \"300 Items Found!\" where 129 is the total number of items.\n\n    *Render the list of programs under the results header\n\n  HomePage:\n    *  When the home page compoent renders it should trigger the PROGRAM_SEARCH query.\n       The graphQL query PROGRAM_SEARCH accepts the following variables:\n       offset, limit, term, and filter.  It returns two items, count & programs.\n       run the query and render out the home page.\n\n      term \n\n    *  Inside of the layout component render the FilterMenu, ProgramContainer, and BottomBar\n*/\n\ntype HomePageProps = {\n  getInitialProps: Function;\n};\n\ninterface HomePageInterface<HomePageProps> extends React.FC<HomePageProps> {\n  getInitialProps?: (ctx: any) => Promise<any>;\n}\n\nconst renderProgramContainer = (programs, count, term = null) => {\n\n  // Create a function to render \n  const renderPrograms = programs =>\n    programs.map((program, i) => (\n      <ProgramRow key={program.id + program.name + i} program={program} />\n    ));\n\n  const renderHeader = (count, term) =>\n    term ? `${count} items found for ${term}!` : `${count} items found!`;\n\n  return (\n    <ProgramContainer>\n      <ResultsHeader>{renderHeader(count, term)}</ResultsHeader>\n      {renderPrograms(programs)}\n    </ProgramContainer>\n  );\n\n};\n\nconst HomePage: HomePageInterface<HomePageProps> = () => {\n\n  let count = 0;\n  let programs = [];\n  const itemsPerPage = 10; \n  const [page, setPage] = useState(1);\n\n  const term = useSelector((state: any) => state.term, shallowEqual);\n  const filter = useSelector((state: any) => state.filter, shallowEqual);\n\n  let variables = {\n    data: {\n      offset: (page - 1) * itemsPerPage,\n      limit: itemsPerPage,\n      term,\n      filter\n    },\n  };\n\n  const { loading, data } = useQuery(PROGRAM_SEARCH, { variables });\n\n  if (!loading) {\n    count = data.programSearch.count;\n    programs = data.programSearch.programs;\n  }\n\n  return (\n    <Layout>\n      <FilterMenu />\n      {loading ? <Spinner /> : renderProgramContainer(programs, count, term)}\n      <BottomBar\n        count={count}\n        page={page}\n        setPage={setPage}\n        itemsPerPage={itemsPerPage}\n      />\n    </Layout>\n  );\n};\n\nexport default HomePage;\n"]},"metadata":{},"sourceType":"module"}