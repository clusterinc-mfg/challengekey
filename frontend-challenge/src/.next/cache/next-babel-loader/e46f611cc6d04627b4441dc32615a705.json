{"ast":null,"code":"var _jsxFileName = \"/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/pages/programDetail/index.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\nimport { withRouter } from 'next/router';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_PROGRAM } from '../../graphQL/queries';\nimport Layout from '../../components/Layout/Layout';\nimport { Spinner } from '../../components/Spinner/Spinner';\nimport SchoolBanner from '../../components/SchoolBanner/SchoolBanner';\n\nconst renderBody = ({\n  name,\n  costPerCredit,\n  programUrl,\n  programDescription,\n  deliveryMode,\n  school\n}) => {\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, __jsx(SchoolBanner, {\n    school: school,\n    name: name,\n    costPerCredit: costPerCredit,\n    deliveryMode: deliveryMode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }));\n};\n\nconst SchoolPage = ({\n  router\n}) => {\n  const {\n    loading,\n    data\n  } = useQuery(GET_PROGRAM, {\n    variables: {\n      data: {\n        id: router.query.id\n      }\n    }\n  });\n\n  if (!loading) {\n    console.log(data);\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, __jsx(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, data.program.name)), __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, loading ? __jsx(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }) : renderBody(data.program)));\n};\n\nexport default withRouter(SchoolPage);","map":{"version":3,"sources":["/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/pages/programDetail/index.tsx"],"names":["React","Head","withRouter","useQuery","GET_PROGRAM","Layout","Spinner","SchoolBanner","renderBody","name","costPerCredit","programUrl","programDescription","deliveryMode","school","SchoolPage","router","loading","data","variables","id","query","console","log","program"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,SAASC,OAAT,QAAwB,kCAAxB;AAEA,OAAOC,YAAP,MAAyB,4CAAzB;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,aAAP;AAAsBC,EAAAA,UAAtB;AAAkCC,EAAAA,kBAAlC;AAAsDC,EAAAA,YAAtD;AAAoEC,EAAAA;AAApE,CAAD,KAAiF;AAChG,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,MAAC,YAAD;AAAc,IAAA,MAAM,EAAEA,MAAtB;AAA8B,IAAA,IAAI,EAAEL,IAApC;AAA0C,IAAA,aAAa,EAAEC,aAAzD;AAAwE,IAAA,YAAY,EAAEG,YAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADL,CADJ;AAKH,CAND;;AAWA,MAAME,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AAEjC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBf,QAAQ,CAACC,WAAD,EAAc;AAC9Ce,IAAAA,SAAS,EAAE;AACTD,MAAAA,IAAI,EAAE;AAAEE,QAAAA,EAAE,EAAEJ,MAAM,CAACK,KAAP,CAAaD;AAAnB;AADG;AADmC,GAAd,CAAlC;;AAMA,MAAI,CAACH,OAAL,EAAc;AACZK,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACD;;AAED,SACE,4BACA,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQA,IAAI,CAACM,OAAL,CAAaf,IAArB,CADJ,CADA,EAIA,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGQ,OAAO,GAAG,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAiBT,UAAU,CAACU,IAAI,CAACM,OAAN,CADrC,CAJA,CADF;AAUD,CAtBD;;AAwBA,eAAetB,UAAU,CAACa,UAAD,CAAzB","sourcesContent":["import React from 'react';\nimport Head from 'next/head';\nimport { withRouter } from 'next/router';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_PROGRAM } from '../../graphQL/queries';\nimport Layout from '../../components/Layout/Layout';\nimport { Spinner } from '../../components/Spinner/Spinner';\n\nimport SchoolBanner from '../../components/SchoolBanner/SchoolBanner'\n\nconst renderBody = ({name, costPerCredit, programUrl, programDescription, deliveryMode, school}) => {\n    return(\n        <div>\n             <SchoolBanner school={school} name={name} costPerCredit={costPerCredit} deliveryMode={deliveryMode} />\n        </div>\n    )\n}\n\n\n\n\nconst SchoolPage = ({ router }) => {\n\n  const { loading, data } = useQuery(GET_PROGRAM, {\n    variables: {\n      data: { id: router.query.id },\n    },\n  });\n\n  if (!loading) {\n    console.log(data);\n  }\n\n  return (\n    <>\n    <Head>\n        <title>{data.program.name}</title>\n    </Head>\n    <Layout>\n      {loading ? <Spinner /> : renderBody(data.program)}\n    </Layout>\n    </>\n    )\n};\n\nexport default withRouter(SchoolPage);\n"]},"metadata":{},"sourceType":"module"}