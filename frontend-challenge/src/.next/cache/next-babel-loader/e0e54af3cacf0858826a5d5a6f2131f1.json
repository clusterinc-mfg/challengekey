{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nvar _jsxFileName = \"/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/pages/programDetail/index.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\nimport { withRouter } from 'next/router';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_PROGRAM } from '../../graphQL/queries';\nimport Layout from '../../components/Layout/Layout';\nimport { Spinner } from '../../components/Spinner/Spinner';\nimport SchoolBanner from '../../components/SchoolBanner/SchoolBanner';\nimport ProgramInfoBanner from '../../components/ProgramInfoBanner/ProgramInfoBanner';\nimport ProgramInfo from '../../components/ProgramInfo/ProgramInfo';\n\nconst calcDeliveryModeColor = (color1, color2, percent) => {\n  const splitHex = hex => hex.length === 4 ? hex.slice(1, 4).split('').map(el => el + el) : [hex.substr(1, 2), hex.substr(3, 2), hex.substr(5, 2)];\n\n  let splitColor1 = splitHex(color1).map(el => _parseInt(el, 16));\n  let splitColor2 = splitHex(color2).map(el => _parseInt(el, 16));\n  let color = \"#\" + splitColor1.map((el, i) => Math.ceil((el + splitColor2[i]) * (1 - percent)).toString(16)).join(\"\");\n  console.log(color);\n};\n\nconst renderBody = ({\n  name,\n  costPerCredit,\n  programUrl,\n  programDescription,\n  deliveryMode,\n  school\n}) => {\n  calcDeliveryModeColor('#FF0000', '#0000FF', 0.5);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, __jsx(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, __jsx(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, name)), __jsx(SchoolBanner, {\n    school: school,\n    name: name,\n    costPerCredit: costPerCredit,\n    deliveryMode: deliveryMode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), __jsx(ProgramInfoBanner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), __jsx(ProgramInfo, {\n    programDescription: programDescription,\n    schoolDescription: school.schoolDescription,\n    schoolName: school.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }));\n};\n\nconst SchoolPage = ({\n  router\n}) => {\n  const {\n    loading,\n    data\n  } = useQuery(GET_PROGRAM, {\n    variables: {\n      data: {\n        id: router.query.id\n      }\n    }\n  });\n  return __jsx(React.Fragment, null, __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, loading ? __jsx(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }) : renderBody(data.program)));\n};\n\nexport default withRouter(SchoolPage);","map":{"version":3,"sources":["/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/pages/programDetail/index.tsx"],"names":["React","Head","withRouter","useQuery","GET_PROGRAM","Layout","Spinner","SchoolBanner","ProgramInfoBanner","ProgramInfo","calcDeliveryModeColor","color1","color2","percent","splitHex","hex","length","slice","split","map","el","substr","splitColor1","splitColor2","color","i","Math","ceil","toString","join","console","log","renderBody","name","costPerCredit","programUrl","programDescription","deliveryMode","school","schoolDescription","SchoolPage","router","loading","data","variables","id","query","program"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,SAASC,OAAT,QAAwB,kCAAxB;AAEA,OAAOC,YAAP,MAAyB,4CAAzB;AACA,OAAOC,iBAAP,MAA8B,sDAA9B;AACA,OAAOC,WAAP,MAAwB,0CAAxB;;AAEA,MAAMC,qBAAqB,GAAG,CAACC,MAAD,EAASC,MAAT,EAAiBC,OAAjB,KAA6B;AACzD,QAAMC,QAAQ,GAAGC,GAAG,IAClBA,GAAG,CAACC,MAAJ,KAAe,CAAf,GACID,GAAG,CACAE,KADH,CACS,CADT,EACY,CADZ,EAEGC,KAFH,CAES,EAFT,EAGGC,GAHH,CAGOC,EAAE,IAAIA,EAAE,GAAGA,EAHlB,CADJ,GAKI,CAACL,GAAG,CAACM,MAAJ,CAAW,CAAX,EAAc,CAAd,CAAD,EAAmBN,GAAG,CAACM,MAAJ,CAAW,CAAX,EAAc,CAAd,CAAnB,EAAqCN,GAAG,CAACM,MAAJ,CAAW,CAAX,EAAc,CAAd,CAArC,CANN;;AAQA,MAAIC,WAAW,GAAGR,QAAQ,CAACH,MAAD,CAAR,CAAiBQ,GAAjB,CAAqBC,EAAE,IAAI,UAASA,EAAT,EAAa,EAAb,CAA3B,CAAlB;AACA,MAAIG,WAAW,GAAGT,QAAQ,CAACF,MAAD,CAAR,CAAiBO,GAAjB,CAAqBC,EAAE,IAAI,UAASA,EAAT,EAAa,EAAb,CAA3B,CAAlB;AAGA,MAAII,KAAK,GAAG,MAAMF,WAAW,CAACH,GAAZ,CAAgB,CAACC,EAAD,EAAKK,CAAL,KAAYC,IAAI,CAACC,IAAL,CAAU,CAACP,EAAE,GAAGG,WAAW,CAACE,CAAD,CAAjB,KAAyB,IAAEZ,OAA3B,CAAV,CAAF,CAAkDe,QAAlD,CAA2D,EAA3D,CAA1B,EAA2FC,IAA3F,CAAgG,EAAhG,CAAlB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AAED,CAhBD;;AAkBA,MAAMQ,UAAU,GAAG,CAAC;AAClBC,EAAAA,IADkB;AAElBC,EAAAA,aAFkB;AAGlBC,EAAAA,UAHkB;AAIlBC,EAAAA,kBAJkB;AAKlBC,EAAAA,YALkB;AAMlBC,EAAAA;AANkB,CAAD,KAOb;AACJ5B,EAAAA,qBAAqB,CAAC,SAAD,EAAY,SAAZ,EAAuB,GAAvB,CAArB;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQuB,IAAR,CADF,CADF,EAIE,MAAC,YAAD;AACE,IAAA,MAAM,EAAEK,MADV;AAEE,IAAA,IAAI,EAAEL,IAFR;AAGE,IAAA,aAAa,EAAEC,aAHjB;AAIE,IAAA,YAAY,EAAEG,YAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAUE,MAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,EAWE,MAAC,WAAD;AACE,IAAA,kBAAkB,EAAED,kBADtB;AAEE,IAAA,iBAAiB,EAAEE,MAAM,CAACC,iBAF5B;AAGE,IAAA,UAAU,EAAED,MAAM,CAACL,IAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,CADF;AAmBD,CA7BD;;AA+BA,MAAMO,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AACjC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBxC,QAAQ,CAACC,WAAD,EAAc;AAC9CwC,IAAAA,SAAS,EAAE;AACTD,MAAAA,IAAI,EAAE;AAAEE,QAAAA,EAAE,EAAEJ,MAAM,CAACK,KAAP,CAAaD;AAAnB;AADG;AADmC,GAAd,CAAlC;AAMA,SACE,4BACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAASH,OAAO,GAAG,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAiBV,UAAU,CAACW,IAAI,CAACI,OAAN,CAA3C,CADF,CADF;AAKD,CAZD;;AAcA,eAAe7C,UAAU,CAACsC,UAAD,CAAzB","sourcesContent":["import React from 'react';\nimport Head from 'next/head';\nimport { withRouter } from 'next/router';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_PROGRAM } from '../../graphQL/queries';\nimport Layout from '../../components/Layout/Layout';\nimport { Spinner } from '../../components/Spinner/Spinner';\n\nimport SchoolBanner from '../../components/SchoolBanner/SchoolBanner';\nimport ProgramInfoBanner from '../../components/ProgramInfoBanner/ProgramInfoBanner';\nimport ProgramInfo from '../../components/ProgramInfo/ProgramInfo';\n\nconst calcDeliveryModeColor = (color1, color2, percent) => {\n  const splitHex = hex =>\n    hex.length === 4\n      ? hex\n          .slice(1, 4)\n          .split('')\n          .map(el => el + el)\n      : [hex.substr(1, 2), hex.substr(3, 2), hex.substr(5, 2)];\n  \n  let splitColor1 = splitHex(color1).map(el => parseInt(el, 16))\n  let splitColor2 = splitHex(color2).map(el => parseInt(el, 16))\n \n  \n  let color = \"#\" + splitColor1.map((el, i)=> ( Math.ceil((el + splitColor2[i]) * (1-percent))).toString(16) ).join(\"\")\n  console.log(color)\n\n};\n\nconst renderBody = ({\n  name,\n  costPerCredit,\n  programUrl,\n  programDescription,\n  deliveryMode,\n  school,\n}) => {\n  calcDeliveryModeColor('#FF0000', '#0000FF', 0.5);\n\n  return (\n    <div>\n      <Head>\n        <title>{name}</title>\n      </Head>\n      <SchoolBanner\n        school={school}\n        name={name}\n        costPerCredit={costPerCredit}\n        deliveryMode={deliveryMode}\n      />\n      <ProgramInfoBanner />\n      <ProgramInfo\n        programDescription={programDescription}\n        schoolDescription={school.schoolDescription}\n        schoolName={school.name}\n      />\n    </div>\n  );\n};\n\nconst SchoolPage = ({ router }) => {\n  const { loading, data } = useQuery(GET_PROGRAM, {\n    variables: {\n      data: { id: router.query.id },\n    },\n  });\n\n  return (\n    <>\n      <Layout>{loading ? <Spinner /> : renderBody(data.program)}</Layout>\n    </>\n  );\n};\n\nexport default withRouter(SchoolPage);\n"]},"metadata":{},"sourceType":"module"}