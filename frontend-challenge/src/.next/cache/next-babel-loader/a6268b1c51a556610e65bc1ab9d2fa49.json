{"ast":null,"code":"var _jsxFileName = \"/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/components/ProgramContainer/ProgramContainer.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Wrapper, ResultsHeader } from './ProgramContainer.styles';\n\nvar renderHeader = function renderHeader(count, term) {\n  return term ? \"\".concat(count, \" items found for \").concat(term) : \"\".concat(count, \" items found\");\n};\n\nvar ProgramContainer = function ProgramContainer(_ref) {\n  var count = _ref.count,\n      programs = _ref.programs,\n      _ref$term = _ref.term,\n      term = _ref$term === void 0 ? null : _ref$term;\n  return __jsx(Wrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, __jsx(ResultsHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, renderHeader(count, term)));\n};\n\nexport default ProgramContainer;","map":{"version":3,"sources":["/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/components/ProgramContainer/ProgramContainer.tsx"],"names":["React","Wrapper","ResultsHeader","renderHeader","count","term","ProgramContainer","programs"],"mappings":";;AAAA,OAAOA,KAAP,MAA8B,OAA9B;AAEA,SAASC,OAAT,EAAkBC,aAAlB,QAAuC,2BAAvC;;AAKA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAQC,IAAR;AAAA,SAAiBA,IAAI,aAAMD,KAAN,8BAA+BC,IAA/B,cAA0CD,KAA1C,iBAArB;AAAA,CAArB;;AAGA,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,OAAmC;AAAA,MAAjCF,KAAiC,QAAjCA,KAAiC;AAAA,MAAzBG,QAAyB,QAAzBA,QAAyB;AAAA,uBAAfF,IAAe;AAAA,MAAfA,IAAe,0BAAV,IAAU;AAE1D,SAEE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEM,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgBF,YAAY,CAACC,KAAD,EAAQC,IAAR,CAA5B,CAFN,CAFF;AAWD,CAbD;;AAeA,eAAeC,gBAAf","sourcesContent":["import React, {useState} from 'react';\n\nimport { Wrapper, ResultsHeader } from './ProgramContainer.styles';\nimport ProgramRow from '../ProgramRow/ProgramRow';\n\n\n\nconst renderHeader = (count, term) => term ? `${count} items found for ${term}` :`${count} items found` \n\n\nconst ProgramContainer = ({count , programs, term=null}) => {\n\n  return(\n    \n    <Wrapper>\n        \n          <ResultsHeader>{renderHeader(count, term)}</ResultsHeader> \n          \n\n          \n    </Wrapper>\n  \n  )\n};\n\nexport default ProgramContainer;\n"]},"metadata":{},"sourceType":"module"}