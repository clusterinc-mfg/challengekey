{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ApolloClient, InMemoryCache } from 'apollo-boost';\nimport { setContext } from 'apollo-link-context';\nimport { createHttpLink } from 'apollo-link-http';\nimport fetch from 'isomorphic-unfetch';\nlet apolloClient = null;\n\nconst create = initialState => {\n  const isBrowser = false;\n  const fetchClient = !isBrowser && fetch;\n  const httpLink = createHttpLink({\n    uri: process.env.apiUrl,\n    credentials: 'same-origin',\n    fetch: fetchClient\n  });\n  const authLink = setContext((_, {\n    headers\n  }) => {\n    // TODO: replace authentication token with dynamic after authentication flow implemented\n    const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InRlc3R5dGVzdDAwMUBnbWFpbC5jb20iLCJpYXQiOjE1NjY2Njg4ODR9.L7EDB2KtN7h0fbjV4h9z5ZOBQU1u3ZewatvVvqhc5_A';\n    return {\n      headers: _objectSpread({}, headers, {\n        authorization: token ? `Bearer ${token}` : ''\n      })\n    };\n  });\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser,\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n};\n\nexport default (initialState => {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (true) {\n    return create(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(initialState);\n  }\n\n  return apolloClient;\n});","map":{"version":3,"sources":["/Users/brad/Documents/interview_challenges/frontend-challenge/src/services/apollo.service.ts"],"names":["ApolloClient","InMemoryCache","setContext","createHttpLink","fetch","apolloClient","create","initialState","isBrowser","fetchClient","httpLink","uri","process","env","apiUrl","credentials","authLink","_","headers","token","authorization","connectToDevTools","ssrMode","link","concat","cache","restore"],"mappings":";;;;;;;;;;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,cAA5C;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,IAAIC,YAAiB,GAAG,IAAxB;;AAEA,MAAMC,MAAM,GAAIC,YAAD,IAAuB;AACpC,QAAMC,SAAS,QAAf;AACA,QAAMC,WAAgB,GAAG,CAACD,SAAD,IAAcJ,KAAvC;AAEA,QAAMM,QAAQ,GAAGP,cAAc,CAAC;AAC9BQ,IAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,MADa;AAE9BC,IAAAA,WAAW,EAAE,aAFiB;AAG9BX,IAAAA,KAAK,EAAEK;AAHuB,GAAD,CAA/B;AAMA,QAAMO,QAAQ,GAAGd,UAAU,CAAC,CAACe,CAAD,EAAI;AAAEC,IAAAA;AAAF,GAAJ,KAAoB;AAC9C;AACA,UAAMC,KAAK,GACT,uJADF;AAGA,WAAO;AACLD,MAAAA,OAAO,oBACFA,OADE;AAELE,QAAAA,aAAa,EAAED,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AAFtC;AADF,KAAP;AAMD,GAX0B,CAA3B;AAaA,SAAO,IAAInB,YAAJ,CAAiB;AACtBqB,IAAAA,iBAAiB,EAAEb,SADG;AAEtBc,IAAAA,OAAO,EAAE,CAACd,SAFY;AAGtBe,IAAAA,IAAI,EAAEP,QAAQ,CAACQ,MAAT,CAAgBd,QAAhB,CAHgB;AAItBe,IAAAA,KAAK,EAAE,IAAIxB,aAAJ,GAAoByB,OAApB,CAA4BnB,YAAY,IAAI,EAA5C;AAJe,GAAjB,CAAP;AAMD,CA7BD;;AA+BA,gBAAgBA,YAAD,IAAwB;AACrC;AACA;AACA,YAAmC;AACjC,WAAOD,MAAM,CAACC,YAAD,CAAb;AACD,GALoC,CAOrC;;;AACA,MAAI,CAACF,YAAL,EAAmB;AACjBA,IAAAA,YAAY,GAAGC,MAAM,CAACC,YAAD,CAArB;AACD;;AAED,SAAOF,YAAP;AACD,CAbD","sourcesContent":["import { ApolloClient, InMemoryCache } from 'apollo-boost';\nimport { setContext } from 'apollo-link-context';\nimport { createHttpLink } from 'apollo-link-http';\nimport fetch from 'isomorphic-unfetch';\n\nlet apolloClient: any = null;\n\nconst create = (initialState: any) => {\n  const isBrowser = typeof window !== 'undefined';\n  const fetchClient: any = !isBrowser && fetch;\n\n  const httpLink = createHttpLink({\n    uri: process.env.apiUrl,\n    credentials: 'same-origin',\n    fetch: fetchClient,\n  });\n\n  const authLink = setContext((_, { headers }) => {\n    // TODO: replace authentication token with dynamic after authentication flow implemented\n    const token =\n      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InRlc3R5dGVzdDAwMUBnbWFpbC5jb20iLCJpYXQiOjE1NjY2Njg4ODR9.L7EDB2KtN7h0fbjV4h9z5ZOBQU1u3ZewatvVvqhc5_A';\n\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    };\n  });\n\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser,\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState || {}),\n  });\n};\n\nexport default (initialState?: any) => {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return create(initialState);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = create(initialState);\n  }\n\n  return apolloClient;\n};\n"]},"metadata":{},"sourceType":"module"}