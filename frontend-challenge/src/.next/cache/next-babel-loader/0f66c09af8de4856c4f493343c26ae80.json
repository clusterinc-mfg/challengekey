{"ast":null,"code":"var _jsxFileName = \"/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/pages/HomePage/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Layout from '../../components/Layout/Layout';\nimport FilterMenu from '../../components/FilterMenu/FilterMenu';\nimport BottomBar from '../../components/BottomBar/BottomBar';\nimport { useQuery } from '@apollo/react-hooks';\nimport { PROGRAM_SEARCH } from '../../graphQL/queries';\nimport { Spinner } from '../../components/Spinner/Spinner';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { ResultsHeader, ProgramContainer } from './HomePage.styles';\nimport ProgramRow from '../../components/ProgramRow/ProgramRow';\n\nconst returnVariables = (page, term) => {\n  const itemsPerPage = 10;\n  return {\n    variables: {\n      offset: (page - 1) * itemsPerPage,\n      limit: itemsPerPage,\n      term\n    }\n  };\n};\n\nconst renderProgramContainer = (programs, count, term = null) => {\n  const renderPrograms = programs => {\n    return programs.map(program => __jsx(ProgramRow, {\n      key: program.id,\n      program: program,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }));\n  };\n\n  const renderHeader = (count, term) => term ? `${count} items found for ${term}` : `${count} items found`;\n\n  return __jsx(ProgramContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, __jsx(ResultsHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, renderHeader(count, term)), renderPrograms(programs));\n};\n\nconst HomePage = () => {\n  const itemsPerPage = 10;\n  const {\n    0: page,\n    1: setPage\n  } = useState(1);\n  const term = useSelector(state => state.term, shallowEqual);\n  const {\n    loading,\n    data,\n    fetchMore\n  } = useQuery(PROGRAM_SEARCH, returnVariables(page, term));\n\n  const customFetch = () => {\n    fetchMore({\n      variables: {\n        offset: (page - 1) * itemsPerPage,\n        limit: itemsPerPage\n      },\n      updateQuery: (prev, {\n        fetchMoreResult\n      }) => {}\n    });\n  };\n\n  if (!loading) {\n    console.log(data);\n  }\n\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, __jsx(FilterMenu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), loading ? __jsx(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }) : renderProgramContainer([], 0, null), __jsx(BottomBar, {\n    page: page,\n    setPage: setPage,\n    itemsPerPage: itemsPerPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }));\n};\n\nexport default HomePage;","map":{"version":3,"sources":["/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/pages/HomePage/index.tsx"],"names":["React","useState","Layout","FilterMenu","BottomBar","useQuery","PROGRAM_SEARCH","Spinner","useSelector","shallowEqual","ResultsHeader","ProgramContainer","ProgramRow","returnVariables","page","term","itemsPerPage","variables","offset","limit","renderProgramContainer","programs","count","renderPrograms","map","program","id","renderHeader","HomePage","setPage","state","loading","data","fetchMore","customFetch","updateQuery","prev","fetchMoreResult","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,UAAP,MAAuB,wCAAvB;AACA,OAAOC,SAAP,MAAsB,sCAAtB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,OAAT,QAAwB,kCAAxB;AACA,SAAQC,WAAR,EAAqBC,YAArB,QAAwC,aAAxC;AACA,SAASC,aAAT,EAAyBC,gBAAzB,QAAgD,mBAAhD;AACA,OAAOC,UAAP,MAAuB,wCAAvB;;AAYA,MAAMC,eAAe,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgB;AACtC,QAAMC,YAAY,GAAG,EAArB;AACA,SAAO;AACLC,IAAAA,SAAS,EAAE;AACTC,MAAAA,MAAM,EAAE,CAACJ,IAAI,GAAC,CAAN,IAAWE,YADV;AAETG,MAAAA,KAAK,EAAEH,YAFE;AAGTD,MAAAA;AAHS;AADN,GAAP;AAOD,CATD;;AAYA,MAAMK,sBAAsB,GAAG,CAACC,QAAD,EAAWC,KAAX,EAAkBP,IAAI,GAAC,IAAvB,KAAgC;AAE7D,QAAMQ,cAAc,GAAGF,QAAQ,IAAI;AACjC,WAAOA,QAAQ,CAACG,GAAT,CAAaC,OAAO,IAAI,MAAC,UAAD;AAAY,MAAA,GAAG,EAAEA,OAAO,CAACC,EAAzB;AAA6B,MAAA,OAAO,EAAED,OAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAxB,CAAP;AACD,GAFD;;AAIA,QAAME,YAAY,GAAG,CAACL,KAAD,EAAQP,IAAR,KAAiBA,IAAI,GAAI,GAAEO,KAAM,oBAAmBP,IAAK,EAApC,GAAwC,GAAEO,KAAM,cAA1F;;AAEA,SACE,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgBK,YAAY,CAACL,KAAD,EAAQP,IAAR,CAA5B,CADA,EAEKQ,cAAc,CAACF,QAAD,CAFnB,CADF;AAMD,CAdD;;AAoBA,MAAMO,QAA0C,GAAG,MAAM;AACvD,QAAMZ,YAAY,GAAG,EAArB;AACA,QAAM;AAAA,OAACF,IAAD;AAAA,OAAOe;AAAP,MAAkB5B,QAAQ,CAAC,CAAD,CAAhC;AAEA,QAAMc,IAAI,GAAGP,WAAW,CAAEsB,KAAD,IAAcA,KAAK,CAACf,IAArB,EAA2BN,YAA3B,CAAxB;AAGA,QAAM;AAAEsB,IAAAA,OAAF;AAAWC,IAAAA,IAAX;AAAiBC,IAAAA;AAAjB,MAA+B5B,QAAQ,CAC3CC,cAD2C,EAC3BO,eAAe,CAACC,IAAD,EAAOC,IAAP,CADY,CAA7C;;AAIA,QAAMmB,WAAW,GAAG,MAAM;AACtBD,IAAAA,SAAS,CAAE;AACThB,MAAAA,SAAS,EAAE;AACTC,QAAAA,MAAM,EAAE,CAACJ,IAAI,GAAC,CAAN,IAAWE,YADV;AAETG,QAAAA,KAAK,EAAEH;AAFE,OADF;AAINmB,MAAAA,WAAW,EAAE,CAACC,IAAD,EAAO;AAACC,QAAAA;AAAD,OAAP,KAA6B,CAE5C;AANQ,KAAF,CAAT;AAQH,GATD;;AAWA,MAAG,CAACN,OAAJ,EAAa;AACXO,IAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ;AACD;;AAED,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEID,OAAO,GAAG,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAiBX,sBAAsB,CAAC,EAAD,EAAI,CAAJ,EAAM,IAAN,CAFlD,EAGE,MAAC,SAAD;AAAW,IAAA,IAAI,EAAEN,IAAjB;AAAuB,IAAA,OAAO,EAAEe,OAAhC;AAAyC,IAAA,YAAY,EAAEb,YAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAOD,CAjCD;;AAmCA,eAAeY,QAAf","sourcesContent":["import React, { useState } from 'react';\nimport Layout from '../../components/Layout/Layout';\nimport FilterMenu from '../../components/FilterMenu/FilterMenu';\nimport BottomBar from '../../components/BottomBar/BottomBar';\nimport { useQuery } from '@apollo/react-hooks';\nimport { PROGRAM_SEARCH } from '../../graphQL/queries';\nimport { Spinner } from '../../components/Spinner/Spinner';\nimport {useSelector, shallowEqual} from 'react-redux'\nimport { ResultsHeader , ProgramContainer} from './HomePage.styles'\nimport ProgramRow from '../../components/ProgramRow/ProgramRow';\n\n\ntype HomePageProps = {\n  getInitialProps: Function;\n};\n\ninterface HomePageInterface<HomePageProps> extends React.FC<HomePageProps> {\n  getInitialProps?: (ctx: any) => Promise<any>;\n}\n\n\nconst returnVariables = (page, term) => {\n  const itemsPerPage = 10;\n  return {\n    variables: {\n      offset: (page-1) * itemsPerPage,\n      limit: itemsPerPage,\n      term\n    }\n  }\n}\n\n\nconst renderProgramContainer = (programs, count, term=null) => {\n\n  const renderPrograms = programs => {\n    return programs.map(program => <ProgramRow key={program.id} program={program} />);\n  };\n  \n  const renderHeader = (count, term) => term ? `${count} items found for ${term}` :`${count} items found` \n\n  return (\n    <ProgramContainer>\n    <ResultsHeader>{renderHeader(count, term)}</ResultsHeader> \n        {renderPrograms(programs)}\n    </ProgramContainer>\n  )\n}\n\n\n\n\n\nconst HomePage: HomePageInterface<HomePageProps> = () => {\n  const itemsPerPage = 10;\n  const [page, setPage] = useState(1);\n\n  const term = useSelector((state: any)=>state.term, shallowEqual)\n\n\n  const { loading, data, fetchMore } = useQuery(\n    PROGRAM_SEARCH, returnVariables(page, term)\n  );\n\n  const customFetch = () => {\n      fetchMore( {\n        variables: {\n          offset: (page-1) * itemsPerPage,\n          limit: itemsPerPage\n        }, updateQuery: (prev, {fetchMoreResult}) => {\n\n        }\n      })\n  }\n\n  if(!loading ){\n    console.log(data)\n  }\n\n  return (\n    <Layout>\n      <FilterMenu />\n      { loading ? <Spinner /> : renderProgramContainer([],0,null) }\n      <BottomBar page={page} setPage={setPage} itemsPerPage={itemsPerPage}/>\n    </Layout>\n  );\n};\n\nexport default HomePage;\n"]},"metadata":{},"sourceType":"module"}