{"ast":null,"code":"var _jsxFileName = \"/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/components/ProgramContainer/ProgramContainer.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Wrapper } from './ProgramContainer.styles';\nimport ProgramRow from '../ProgramRow/ProgramRow';\n\nconst renderHeader = (count, term) => term ? `${count} items found for ${term}` : `${count} items found`;\n\nconst ProgramContainer = ({\n  count,\n  programs,\n  term = null\n}) => {\n  return __jsx(Wrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, programs.map(program => __jsx(ProgramRow, {\n    key: program.id,\n    program: program,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  })));\n};\n\nexport default ProgramContainer;","map":{"version":3,"sources":["/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/components/ProgramContainer/ProgramContainer.tsx"],"names":["React","Wrapper","ProgramRow","renderHeader","count","term","ProgramContainer","programs","map","program","id"],"mappings":";;AAAA,OAAOA,KAAP,MAA8B,OAA9B;AAEA,SAASC,OAAT,QAAuC,2BAAvC;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;AAIA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiBA,IAAI,GAAI,GAAED,KAAM,oBAAmBC,IAAK,EAApC,GAAwC,GAAED,KAAM,cAA1F;;AAGA,MAAME,gBAAgB,GAAG,CAAC;AAACF,EAAAA,KAAD;AAASG,EAAAA,QAAT;AAAmBF,EAAAA,IAAI,GAAC;AAAxB,CAAD,KAAmC;AAE1D,SAEE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKQE,QAAQ,CAACC,GAAT,CAAaC,OAAO,IAAI,MAAC,UAAD;AAAY,IAAA,GAAG,EAAEA,OAAO,CAACC,EAAzB;AAA6B,IAAA,OAAO,EAAED,OAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAxB,CALR,CAFF;AAaD,CAfD;;AAiBA,eAAeH,gBAAf","sourcesContent":["import React, {useState} from 'react';\n\nimport { Wrapper, ResultsHeader } from './ProgramContainer.styles';\nimport ProgramRow from '../ProgramRow/ProgramRow';\n\n\n\nconst renderHeader = (count, term) => term ? `${count} items found for ${term}` :`${count} items found` \n\n\nconst ProgramContainer = ({count , programs, term=null}) => {\n\n  return(\n    \n    <Wrapper>\n        \n          {/* <ResultsHeader>{renderHeader(count, term)}</ResultsHeader>  */}\n          \n          {\n            programs.map(program => <ProgramRow key={program.id} program={program} />)\n          }\n          \n    </Wrapper>\n  \n  )\n};\n\nexport default ProgramContainer;\n"]},"metadata":{},"sourceType":"module"}