{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/components/ProgramContainer/ProgramContainer.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Wrapper, ResultsHeader } from './ProgramContainer.styles';\nimport ProgramRow from '../ProgramRow/ProgramRow';\n\nvar renderPrograms = function renderPrograms(programs) {\n  return programs.map(function (program) {\n    return __jsx(ProgramRow, {\n      program: program,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7\n      },\n      __self: this\n    });\n  });\n};\n\nvar renderHeader = function renderHeader(count, term) {\n  return term ? \"\".concat(count, \" items found for \").concat(term) : \"\".concat(count, \" items found\");\n};\n\nvar ProgramContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ProgramContainer, _React$Component);\n\n  function ProgramContainer() {\n    _classCallCheck(this, ProgramContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ProgramContainer).apply(this, arguments));\n  }\n\n  _createClass(ProgramContainer, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(Wrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }, __jsx(ResultsHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, renderHeader(count.count, term)));\n    }\n  }]);\n\n  return ProgramContainer;\n}(React.Component); // const ProgramContainer = (count , programs, term=null) => {\n//   const [s, setS] = useState(programs)\n//   return(<Wrapper>\n//     <ResultsHeader>{renderHeader(count.count, term)}</ResultsHeader>\n//     {/* {renderPrograms(programs)} */}\n//   </Wrapper>)\n// };\n// export default ProgramContainer;","map":{"version":3,"sources":["/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/components/ProgramContainer/ProgramContainer.tsx"],"names":["React","Wrapper","ResultsHeader","ProgramRow","renderPrograms","programs","map","program","renderHeader","count","term","ProgramContainer","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAA8B,OAA9B;AAEA,SAASC,OAAT,EAAkBC,aAAlB,QAAuC,2BAAvC;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,QAAQ,EAAI;AACjC,SAAOA,QAAQ,CAACC,GAAT,CAAa,UAAAC,OAAO;AAAA,WAAI,MAAC,UAAD;AAAY,MAAA,OAAO,EAAEA,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAJ;AAAA,GAApB,CAAP;AACD,CAFD;;AAIA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAQC,IAAR;AAAA,SAAiBA,IAAI,aAAMD,KAAN,8BAA+BC,IAA/B,cAA0CD,KAA1C,iBAArB;AAAA,CAArB;;IAEME,gB;;;;;;;;;;;;;6BAEI;AACR,aACI,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgBH,YAAY,CAACC,KAAK,CAACA,KAAP,EAAcC,IAAd,CAA5B,CADF,CADJ;AAKE;;;;EAR2BV,KAAK,CAACY,S,GAYrC;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, {useState} from 'react';\n\nimport { Wrapper, ResultsHeader } from './ProgramContainer.styles';\nimport ProgramRow from '../ProgramRow/ProgramRow';\n\nconst renderPrograms = programs => {\n  return programs.map(program => <ProgramRow program={program} />);\n};\n\nconst renderHeader = (count, term) => term ? `${count} items found for ${term}` :`${count} items found` \n\nclass ProgramContainer extends React.Component {\n\n  render(){\n  return (\n      <Wrapper>\n        <ResultsHeader>{renderHeader(count.count, term)}</ResultsHeader>\n        {/* {renderPrograms(programs)} */}\n      </Wrapper>\n  )}\n}\n\n\n// const ProgramContainer = (count , programs, term=null) => {\n\n//   const [s, setS] = useState(programs)\n\n\n//   return(<Wrapper>\n//     <ResultsHeader>{renderHeader(count.count, term)}</ResultsHeader>\n//     {/* {renderPrograms(programs)} */}\n//   </Wrapper>)\n// };\n\n// export default ProgramContainer;\n"]},"metadata":{},"sourceType":"module"}