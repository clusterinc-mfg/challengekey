{"ast":null,"code":"var _jsxFileName = \"/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/pages/HomePage/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Layout from '../../components/Layout/Layout';\nimport FilterMenu from '../../components/FilterMenu/FilterMenu';\nimport BottomBar from '../../components/BottomBar/BottomBar';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_COUNT, GET_ALL_PROGRAMS } from '../../graphQL/queries';\nimport { Spinner } from '../../components/Spinner/Spinner';\nimport ProgramContainer from '../../components/ProgramContainer/ProgramContainer';\n\nvar renderContainer = function renderContainer(count, programs) {\n  if (count & count.count && programs & programs.allPrograms) {\n    console.log('yess');\n  }\n};\n\nvar HomePage = function HomePage() {\n  var itemsPerPage = 10;\n\n  var _useState = useState(1),\n      page = _useState[0],\n      setPage = _useState[1];\n\n  var _useQuery = useQuery(GET_COUNT),\n      loadingCount = _useQuery.loading,\n      count = _useQuery.data;\n\n  var _useQuery2 = useQuery(GET_ALL_PROGRAMS, {\n    variables: {\n      offset: (page - 1) * itemsPerPage,\n      limit: itemsPerPage\n    }\n  }),\n      loadingPrograms = _useQuery2.loading,\n      programs = _useQuery2.data;\n\n  renderContainer();\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, __jsx(FilterMenu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), loadingPrograms ? __jsx(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }) : __jsx(ProgramContainer, {\n    count: count.programsCount,\n    programs: {},\n    term: null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), __jsx(BottomBar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }));\n};\n\nexport default HomePage;","map":{"version":3,"sources":["/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/pages/HomePage/index.tsx"],"names":["React","useState","Layout","FilterMenu","BottomBar","useQuery","GET_COUNT","GET_ALL_PROGRAMS","Spinner","ProgramContainer","renderContainer","count","programs","allPrograms","console","log","HomePage","itemsPerPage","page","setPage","loadingCount","loading","data","variables","offset","limit","loadingPrograms","programsCount"],"mappings":";;AAAA,OAAOA,KAAP,IAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,UAAP,MAAuB,wCAAvB;AACA,OAAOC,SAAP,MAAsB,sCAAtB;AACA,SAAuBC,QAAvB,QAAuC,qBAAvC;AACA,SAASC,SAAT,EAAoBC,gBAApB,QAA4C,uBAA5C;AACA,SAASC,OAAT,QAAwB,kCAAxB;AAEA,OAAOC,gBAAP,MAA6B,oDAA7B;;AAUA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC5C,MAAGD,KAAK,GAAGA,KAAK,CAACA,KAAd,IAAuBC,QAAQ,GAAGA,QAAQ,CAACC,WAA9C,EAA0D;AACxDC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACD;AACD,CAJD;;AAMA,IAAMC,QAA0C,GAAG,SAA7CA,QAA6C,GAAM;AACvD,MAAMC,YAAY,GAAG,EAArB;;AADuD,kBAE/BhB,QAAQ,CAAC,CAAD,CAFuB;AAAA,MAEhDiB,IAFgD;AAAA,MAE1CC,OAF0C;;AAAA,kBAIRd,QAAQ,CAACC,SAAD,CAJA;AAAA,MAItCc,YAJsC,aAI/CC,OAJ+C;AAAA,MAIlBV,KAJkB,aAIxBW,IAJwB;;AAAA,mBAKFjB,QAAQ,CAC3DE,gBAD2D,EACzC;AAChBgB,IAAAA,SAAS,EAAE;AACTC,MAAAA,MAAM,EAAE,CAACN,IAAI,GAAC,CAAN,IAAWD,YADV;AAETQ,MAAAA,KAAK,EAAER;AAFE;AADK,GADyC,CALN;AAAA,MAKtCS,eALsC,cAK/CL,OAL+C;AAAA,MAKfT,QALe,cAKrBU,IALqB;;AAevDZ,EAAAA,eAAe;AACf,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGgB,eAAe,GACd,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADc,GAGd,MAAC,gBAAD;AAAmB,IAAA,KAAK,EAAEf,KAAK,CAACgB,aAAhC;AAA+C,IAAA,QAAQ,EAAE,EAAzD;AAA6D,IAAA,IAAI,EAAE,IAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,EAOE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF;AAWD,CA3BD;;AA6BA,eAAeX,QAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Layout from '../../components/Layout/Layout';\nimport FilterMenu from '../../components/FilterMenu/FilterMenu';\nimport BottomBar from '../../components/BottomBar/BottomBar';\nimport { useLazyQuery, useQuery } from '@apollo/react-hooks';\nimport { GET_COUNT, GET_ALL_PROGRAMS } from '../../graphQL/queries';\nimport { Spinner } from '../../components/Spinner/Spinner';\n\nimport ProgramContainer from '../../components/ProgramContainer/ProgramContainer';\n\ntype HomePageProps = {\n  getInitialProps: Function;\n};\n\ninterface HomePageInterface<HomePageProps> extends React.FC<HomePageProps> {\n  getInitialProps?: (ctx: any) => Promise<any>;\n}\n\nconst renderContainer = (count, programs) => {\n if(count & count.count && programs & programs.allPrograms){\n   console.log('yess')\n }\n}\n\nconst HomePage: HomePageInterface<HomePageProps> = () => {\n  const itemsPerPage = 10;\n  const [page, setPage] = useState(1);\n\n  const { loading: loadingCount, data: count } = useQuery(GET_COUNT);\n  const { loading: loadingPrograms, data: programs } = useQuery(\n    GET_ALL_PROGRAMS, {\n      variables: {\n        offset: (page-1) * itemsPerPage,\n        limit: itemsPerPage\n      }\n    }\n  );\n\n  \n  renderContainer()\n  return (\n    <Layout>\n      <FilterMenu />\n      {loadingPrograms ? (\n        <Spinner />\n      ) : (\n        <ProgramContainer  count={count.programsCount} programs={{}} term={null} />\n      )}\n      <BottomBar />\n    </Layout>\n  );\n};\n\nexport default HomePage;\n"]},"metadata":{},"sourceType":"module"}