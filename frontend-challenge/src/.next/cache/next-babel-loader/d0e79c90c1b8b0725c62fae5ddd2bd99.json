{"ast":null,"code":"var _jsxFileName = \"/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/components/ProgramContainer/ProgramContainer.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Wrapper } from './ProgramContainer.styles';\nimport ProgramRow from '../ProgramRow/ProgramRow';\n\nconst renderPrograms = programs => {\n  return programs.map(program => __jsx(ProgramRow, {\n    program: program,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }));\n};\n\nconst renderHeader = (count, term) => term ? `${count} items found for ${term}` : `${count} items found`;\n\nconst ProgramContainer = ({\n  count,\n  loading,\n  programs,\n  term = null\n}) => {\n  console.log(programs);\n  return __jsx(Wrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  });\n};\n\nexport default ProgramContainer;","map":{"version":3,"sources":["/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/components/ProgramContainer/ProgramContainer.tsx"],"names":["React","Wrapper","ProgramRow","renderPrograms","programs","map","program","renderHeader","count","term","ProgramContainer","loading","console","log"],"mappings":";;AAAA,OAAOA,KAAP,MAA8B,OAA9B;AAEA,SAASC,OAAT,QAAuC,2BAAvC;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;AAEA,MAAMC,cAAc,GAAGC,QAAQ,IAAI;AACjC,SAAOA,QAAQ,CAACC,GAAT,CAAaC,OAAO,IAAI,MAAC,UAAD;AAAY,IAAA,OAAO,EAAEA,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAxB,CAAP;AACD,CAFD;;AAIA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiBA,IAAI,GAAI,GAAED,KAAM,oBAAmBC,IAAK,EAApC,GAAwC,GAAED,KAAM,cAA1F;;AAGA,MAAME,gBAAgB,GAAG,CAAC;AAACF,EAAAA,KAAD;AAASG,EAAAA,OAAT;AAAkBP,EAAAA,QAAlB;AAA4BK,EAAAA,IAAI,GAAC;AAAjC,CAAD,KAA4C;AAEnEG,EAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ;AAGA,SAAO,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAID,CATD;;AAWA,eAAeM,gBAAf","sourcesContent":["import React, {useState} from 'react';\n\nimport { Wrapper, ResultsHeader } from './ProgramContainer.styles';\nimport ProgramRow from '../ProgramRow/ProgramRow';\n\nconst renderPrograms = programs => {\n  return programs.map(program => <ProgramRow program={program} />);\n};\n\nconst renderHeader = (count, term) => term ? `${count} items found for ${term}` :`${count} items found` \n\n\nconst ProgramContainer = ({count , loading, programs, term=null}) => {\n\n  console.log(programs)\n\n\n  return(<Wrapper>\n    {/* <ResultsHeader>{renderHeader(count.count, term)}</ResultsHeader> */}\n    {/* {renderPrograms(programs)} */}\n    </Wrapper>)\n};\n\nexport default ProgramContainer;\n"]},"metadata":{},"sourceType":"module"}