{"ast":null,"code":"//TODO: Setup the filter actions\n\n/*\n    * Create an enumerated value called FilterActionTypes\n        it should have one value called updateFilter\n\n    * Create an action creator called updateFilter that updates the filter state.\n*/\nexport let FilterActionTypes;\n\n(function (FilterActionTypes) {\n  FilterActionTypes[\"updateFilter\"] = \"UPDATE_FILTER\";\n})(FilterActionTypes || (FilterActionTypes = {}));\n\nexport const updateFilter = filter => {\n  return {\n    type: FilterActionTypes.updateFilter,\n    payload: filter\n  };\n};","map":{"version":3,"sources":["/Users/bradtudor/Documents/interview_challenges/frontend-challenge key/src/redux/Filter/filter.actions.ts"],"names":["FilterActionTypes","updateFilter","filter","type","payload"],"mappings":"AAAA;;AACA;;;;;;AAOA,WAAYA,iBAAZ;;WAAYA,iB;AAAAA,EAAAA,iB;GAAAA,iB,KAAAA,iB;;AAIZ,OAAO,MAAMC,YAAY,GAAIC,MAAD,IAAmB;AAC3C,SAAM;AACFC,IAAAA,IAAI,EAAEH,iBAAiB,CAACC,YADtB;AAEFG,IAAAA,OAAO,EAAEF;AAFP,GAAN;AAIH,CALM","sourcesContent":["//TODO: Setup the filter actions\n/*\n    * Create an enumerated value called FilterActionTypes\n        it should have one value called updateFilter\n\n    * Create an action creator called updateFilter that updates the filter state.\n*/\n\nexport enum FilterActionTypes {\n    updateFilter = \"UPDATE_FILTER\"\n}\n\nexport const updateFilter = (filter:string) => {\n    return{\n        type: FilterActionTypes.updateFilter,\n        payload: filter\n    }\n}"]},"metadata":{},"sourceType":"module"}