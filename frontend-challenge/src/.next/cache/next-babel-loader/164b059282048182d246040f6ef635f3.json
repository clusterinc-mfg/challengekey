{"ast":null,"code":"var _jsxFileName = \"/Users/brad/Documents/interview_challenges/frontend-challenge/src/pages/HomePage/index.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport Layout from '../../components/Layout/Layout';\nimport Header from '../../components/Header/Header';\nimport FilterMenu from '../../components/FilterMenu/FilterMenu';\nimport BottomBar from '../../components/BottomBar/BottomBar';\nimport ProgramRow from '../../components/ProgramRow/ProgramRow';\nimport { ProgramContainer, ResultsHeader } from './HomePage.styles';\n\nconst HomePage = () => {\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, __jsx(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), __jsx(FilterMenu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), __jsx(ProgramContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, __jsx(ResultsHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"300 programs found for engineering!\"), __jsx(ProgramRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }), __jsx(ProgramRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }), __jsx(ProgramRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }), __jsx(ProgramRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), __jsx(ProgramRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), __jsx(ProgramRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), __jsx(ProgramRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), __jsx(ProgramRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), __jsx(ProgramRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), __jsx(ProgramRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  })), __jsx(BottomBar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }));\n};\n\nHomePage.getInitialProps = async ctx => {\n  const {\n    loading,\n    error,\n    data,\n    refetch,\n    networkStatus\n  } = useQuery(GET_DOG_PHOTO, {\n    variables: {\n      breed\n    },\n    skip: !breed,\n    notifyOnNetworkStatusChange: true\n  });\n  return {};\n};\n\nexport default HomePage;","map":{"version":3,"sources":["/Users/brad/Documents/interview_challenges/frontend-challenge/src/pages/HomePage/index.tsx"],"names":["React","useQuery","Layout","Header","FilterMenu","BottomBar","ProgramRow","ProgramContainer","ResultsHeader","HomePage","getInitialProps","ctx","loading","error","data","refetch","networkStatus","GET_DOG_PHOTO","variables","breed","skip","notifyOnNetworkStatusChange"],"mappings":";;AACA,OAAOA,KAAP,MAA+B,OAA/B;AAEA,SAASC,QAAT,QAAyB,qBAAzB;AAEA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,UAAP,MAAuB,wCAAvB;AACA,OAAOC,SAAP,MAAsB,sCAAtB;AACA,OAAOC,UAAP,MAAuB,wCAAvB;AAEA,SAASC,gBAAT,EAA2BC,aAA3B,QAA+C,mBAA/C;;AAUA,MAAMC,QAA0C,GAAG,MAAM;AAIvD,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAEA,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,EAGA,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CADJ,EAEI,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGI,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EAII,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,EAKI,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,EAMI,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,EAOI,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,EAQI,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ,EASI,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,EAUI,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,EAWI,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXJ,CAHA,EAgBA,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBA,CADF;AAoBD,CAxBD;;AA2BAA,QAAQ,CAACC,eAAT,GAA2B,MAAMC,GAAN,IAAc;AACvC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA,IAAlB;AAAwBC,IAAAA,OAAxB;AAAiCC,IAAAA;AAAjC,MAAmDf,QAAQ,CAC/DgB,aAD+D,EAE/D;AACEC,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF,KADb;AAEEC,IAAAA,IAAI,EAAE,CAACD,KAFT;AAGEE,IAAAA,2BAA2B,EAAE;AAH/B,GAF+D,CAAjE;AASA,SAAO,EAAP;AACD,CAXD;;AAcA,eAAeZ,QAAf","sourcesContent":["\nimport React, {useEffect} from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\n\nimport Layout from '../../components/Layout/Layout'\nimport Header from '../../components/Header/Header'\nimport FilterMenu from '../../components/FilterMenu/FilterMenu'\nimport BottomBar from '../../components/BottomBar/BottomBar'\nimport ProgramRow from '../../components/ProgramRow/ProgramRow'\n\nimport { ProgramContainer, ResultsHeader} from './HomePage.styles'\n\ntype HomePageProps = {\n  getInitialProps: Function\n}\n\ninterface HomePageInterface<HomePageProps> extends React.FC<HomePageProps> {\n  getInitialProps?: (ctx: any) => Promise<any>\n}\n\nconst HomePage: HomePageInterface<HomePageProps> = () => {\n\n\n\n  return (\n    <Layout>\n    <Header />\n    <FilterMenu />\n    <ProgramContainer>\n        <ResultsHeader>300 programs found for engineering!</ResultsHeader>\n        <ProgramRow />\n        <ProgramRow />\n        <ProgramRow />\n        <ProgramRow />\n        <ProgramRow />\n        <ProgramRow />\n        <ProgramRow />\n        <ProgramRow />\n        <ProgramRow />\n        <ProgramRow />\n    </ProgramContainer>\n    <BottomBar/>\n  </Layout>\n  )\n}\n\n\nHomePage.getInitialProps = async(ctx) => {\n  const { loading, error, data, refetch, networkStatus } = useQuery(\n    GET_DOG_PHOTO,\n    {\n      variables: { breed },\n      skip: !breed,\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  return {}\n}\n\n\nexport default HomePage;\n"]},"metadata":{},"sourceType":"module"}