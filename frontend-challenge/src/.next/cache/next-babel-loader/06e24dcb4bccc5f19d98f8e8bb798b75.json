{"ast":null,"code":"import nextReduxSaga from 'next-redux-saga';\nimport withRedux from 'next-redux-wrapper';\nimport { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from './rootReducer';\nimport rootSaga from './rootSaga';\nconst persistConfig = {\n  key: 'nextjs',\n  whitelist: [],\n  storage\n};\n\nconst configureStore = (initialState = {}, {\n  isServer\n}) => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware];\n\n  if (!isServer) {\n    middlewares.push(logger);\n  }\n\n  const reducer = isServer ? rootReducer : persistReducer(persistConfig, rootReducer);\n  const store = createStore(reducer, initialState, applyMiddleware(...middlewares));\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n\n  if (!isServer) {\n    store.__persistor = persistStore(store);\n  }\n\n  return store;\n};\n\nexport default (BaseComponent => withRedux(configureStore)(nextReduxSaga(BaseComponent)));","map":null,"metadata":{},"sourceType":"module"}