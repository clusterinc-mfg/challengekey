{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    query program($data: ProgramInput){\\n        program(data: $data){\\n            id\\n            name\\n            costPerCredit\\n            programUrl\\n            programDescription\\n            school {\\n                name\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    query allPrograms($offset: Float, $limit: Float) {\\n    allPrograms(offset: $offset, limit: $limit){\\n        name\\n        degreeType\\n        deliveryMode\\n        school{\\n        name\\n        totalEnrollment\\n        }\\n    }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query programsCount {\\n        programsCount\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nexport var GET_COUNT = gql(_templateObject());\nexport var GET_ALL_PROGRAMS = gql(_templateObject2());\nexport var GET_PROGRAM = gql(_templateObject3());","map":{"version":3,"sources":["/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/graphQL/queries.ts"],"names":["gql","GET_COUNT","GET_ALL_PROGRAMS","GET_PROGRAM"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AAEA,OAAO,IAAMC,SAAS,GAAGD,GAAH,mBAAf;AAMP,OAAO,IAAME,gBAAgB,GAAGF,GAAH,oBAAtB;AAmBP,OAAO,IAAMG,WAAW,GAAGH,GAAH,oBAAjB","sourcesContent":["import gql from 'graphql-tag';\n\nexport const GET_COUNT = gql`\n    query programsCount {\n        programsCount\n    }\n`\n\nexport const GET_ALL_PROGRAMS = gql`\n    query allPrograms($offset: Float, $limit: Float) {\n    allPrograms(offset: $offset, limit: $limit){\n        name\n        degreeType\n        deliveryMode\n        school{\n        name\n        totalEnrollment\n        }\n    }\n    }\n`\n\ntype ProgramInput = {\n    id: String\n}\n\n\nexport const GET_PROGRAM = gql`\n    query program($data: ProgramInput){\n        program(data: $data){\n            id\n            name\n            costPerCredit\n            programUrl\n            programDescription\n            school {\n                name\n            }\n        }\n    }\n`"]},"metadata":{},"sourceType":"module"}