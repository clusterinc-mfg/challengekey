{"ast":null,"code":"import nextReduxSaga from 'next-redux-saga';\nimport withRedux from 'next-redux-wrapper';\nimport { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from './rootReducer';\nimport rootSaga from './rootSaga';\nconst persistConfig = {\n  key: 'nextjs',\n  whitelist: [],\n  storage\n};\n\nconst configureStore = (initialState = {}, {\n  isServer\n}) => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware];\n\n  if (!isServer) {\n    middlewares.push(logger);\n  }\n\n  const reducer = isServer ? rootReducer : persistReducer(persistConfig, rootReducer);\n  const store = createStore(reducer, initialState, applyMiddleware(...middlewares));\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n\n  if (!isServer) {\n    store.__persistor = persistStore(store);\n  }\n\n  return store;\n};\n\nexport default (BaseComponent => withRedux(configureStore)(nextReduxSaga(BaseComponent)));","map":{"version":3,"sources":["/Users/bradtudor/Documents/interview_challenges/frontend-challenge key/src/redux/configureStore.ts"],"names":["nextReduxSaga","withRedux","createStore","applyMiddleware","logger","persistStore","persistReducer","storage","createSagaMiddleware","rootReducer","rootSaga","persistConfig","key","whitelist","configureStore","initialState","isServer","sagaMiddleware","middlewares","push","reducer","store","sagaTask","run","__persistor","BaseComponent"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,iBAA1B;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAAkE,OAAlE;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAE,QADe;AAEpBC,EAAAA,SAAS,EAAE,EAFS;AAGpBN,EAAAA;AAHoB,CAAtB;;AAMA,MAAMO,cAAc,GAAG,CACrBC,YAAY,GAAG,EADM,EAErB;AAAEC,EAAAA;AAAF,CAFqB,KAGlB;AACH,QAAMC,cAAc,GAAGT,oBAAoB,EAA3C;AACA,QAAMU,WAAyB,GAAG,CAACD,cAAD,CAAlC;;AAEA,MAAI,CAACD,QAAL,EAAe;AACbE,IAAAA,WAAW,CAACC,IAAZ,CAAiBf,MAAjB;AACD;;AAED,QAAMgB,OAAqB,GAAGJ,QAAQ,GAClCP,WADkC,GAElCH,cAAc,CAACK,aAAD,EAAgBF,WAAhB,CAFlB;AAIA,QAAMY,KAAU,GAAGnB,WAAW,CAC5BkB,OAD4B,EAE5BL,YAF4B,EAG5BZ,eAAe,CAAC,GAAGe,WAAJ,CAHa,CAA9B;AAKAG,EAAAA,KAAK,CAACC,QAAN,GAAiBL,cAAc,CAACM,GAAf,CAAmBb,QAAnB,CAAjB;;AAEA,MAAI,CAACM,QAAL,EAAe;AACbK,IAAAA,KAAK,CAACG,WAAN,GAAoBnB,YAAY,CAACgB,KAAD,CAAhC;AACD;;AAED,SAAOA,KAAP;AACD,CA3BD;;AA6BA,gBAAgBI,aAAD,IACbxB,SAAS,CAACa,cAAD,CAAT,CAA0Bd,aAAa,CAACyB,aAAD,CAAvC,CADF","sourcesContent":["import nextReduxSaga from 'next-redux-saga';\nimport withRedux from 'next-redux-wrapper';\nimport { createStore, applyMiddleware, Reducer, Middleware } from 'redux';\nimport logger from 'redux-logger';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from './rootReducer';\nimport rootSaga from './rootSaga';\n\nconst persistConfig = {\n  key: 'nextjs',\n  whitelist: [],\n  storage,\n};\n\nconst configureStore = (\n  initialState = {},\n  { isServer }: { isServer: boolean },\n) => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares: Middleware[] = [sagaMiddleware];\n\n  if (!isServer) {\n    middlewares.push(logger);\n  }\n\n  const reducer: Reducer<any> = isServer\n    ? rootReducer\n    : persistReducer(persistConfig, rootReducer);\n\n  const store: any = createStore(\n    reducer,\n    initialState,\n    applyMiddleware(...middlewares),\n  );\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n\n  if (!isServer) {\n    store.__persistor = persistStore(store);\n  }\n\n  return store;\n};\n\nexport default (BaseComponent: any) =>\n  withRedux(configureStore)(nextReduxSaga(BaseComponent));\n"]},"metadata":{},"sourceType":"module"}