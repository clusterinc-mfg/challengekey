{"ast":null,"code":"var _jsxFileName = \"/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/components/ProgramContainer/ProgramContainer.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { Wrapper, ResultsHeader } from './ProgramContainer.styles';\nimport ProgramRow from '../ProgramRow/ProgramRow';\n\nvar renderPrograms = function renderPrograms(programs) {\n  return programs.map(function (program) {\n    return __jsx(ProgramRow, {\n      program: program,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7\n      },\n      __self: this\n    });\n  });\n};\n\nvar renderHeader = function renderHeader(count, term) {\n  return term ? \"\".concat(count, \" items found for \").concat(term) : \"\".concat(count, \" items found\");\n};\n\nvar ProgramContainer = function ProgramContainer(count, programs) {\n  var term = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n  var _useState = useState(programs.allPrograms),\n      s = _useState[0],\n      setS = _useState[1];\n\n  console.log(programs);\n  return __jsx(Wrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, __jsx(ResultsHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, renderHeader(count.count, term)));\n};\n\nexport default ProgramContainer;","map":{"version":3,"sources":["/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/components/ProgramContainer/ProgramContainer.tsx"],"names":["React","useState","Wrapper","ResultsHeader","ProgramRow","renderPrograms","programs","map","program","renderHeader","count","term","ProgramContainer","allPrograms","s","setS","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AAEA,SAASC,OAAT,EAAkBC,aAAlB,QAAuC,2BAAvC;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,QAAQ,EAAI;AACjC,SAAOA,QAAQ,CAACC,GAAT,CAAa,UAAAC,OAAO;AAAA,WAAI,MAAC,UAAD;AAAY,MAAA,OAAO,EAAEA,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAJ;AAAA,GAApB,CAAP;AACD,CAFD;;AAIA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAQC,IAAR;AAAA,SAAiBA,IAAI,aAAMD,KAAN,8BAA+BC,IAA/B,cAA0CD,KAA1C,iBAArB;AAAA,CAArB;;AAGA,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACF,KAAD,EAASJ,QAAT,EAAiC;AAAA,MAAdK,IAAc,uEAAT,IAAS;;AAAA,kBAEtCV,QAAQ,CAACK,QAAQ,CAACO,WAAV,CAF8B;AAAA,MAEjDC,CAFiD;AAAA,MAE9CC,IAF8C;;AAIxDC,EAAAA,OAAO,CAACC,GAAR,CAAYX,QAAZ;AAEA,SAAO,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACL,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgBG,YAAY,CAACC,KAAK,CAACA,KAAP,EAAcC,IAAd,CAA5B,CADK,CAAP;AAID,CAVD;;AAYA,eAAeC,gBAAf","sourcesContent":["import React, {useState} from 'react';\n\nimport { Wrapper, ResultsHeader } from './ProgramContainer.styles';\nimport ProgramRow from '../ProgramRow/ProgramRow';\n\nconst renderPrograms = programs => {\n  return programs.map(program => <ProgramRow program={program} />);\n};\n\nconst renderHeader = (count, term) => term ? `${count} items found for ${term}` :`${count} items found` \n\n\nconst ProgramContainer = (count , programs, term=null) => {\n\n  const [s, setS] = useState(programs.allPrograms)\n\n  console.log(programs)\n\n  return(<Wrapper>\n    <ResultsHeader>{renderHeader(count.count, term)}</ResultsHeader>\n    {/* {renderPrograms(programs)} */}\n  </Wrapper>)\n};\n\nexport default ProgramContainer;\n"]},"metadata":{},"sourceType":"module"}