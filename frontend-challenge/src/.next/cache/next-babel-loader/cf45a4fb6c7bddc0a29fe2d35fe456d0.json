{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/pages/Home/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Layout from '../../components/Layout/Layout';\nimport Header from '../../components/Header/Header';\nimport FilterMenu from '../../components/FilterMenu/FilterMenu';\nimport BottomBar from '../../components/BottomBar/BottomBar';\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport { GET_COUNT, GET_ALL_PROGRAMS } from '../../graphQL/queries';\n\nvar HomePage = function HomePage(_ref) {\n  var count = _ref.count;\n  var itemsPerPage = 10;\n\n  var _useState = useState(1),\n      page = _useState[0],\n      setPage = _useState[1];\n\n  var _useLazyQuery = useLazyQuery(GET_ALL_PROGRAMS, {\n    variables: {\n      offset: page - 1,\n      limit: 10\n    },\n    fetchPolicy: \"cache-and-network\"\n  }),\n      _useLazyQuery2 = _slicedToArray(_useLazyQuery, 2),\n      getAllPrograms = _useLazyQuery2[0],\n      _useLazyQuery2$ = _useLazyQuery2[1],\n      loading = _useLazyQuery2$.loading,\n      data = _useLazyQuery2$.data,\n      fetchMore = _useLazyQuery2$.fetchMore;\n\n  useEffect(function () {\n    getAllPrograms();\n  }, []);\n\n  if (data && data.allPrograms) {\n    console.log(data.allPrograms);\n  }\n\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, __jsx(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), __jsx(FilterMenu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), __jsx(BottomBar, {\n    page: page,\n    setPage: setPage,\n    numberOfPages: Math.ceil(count / itemsPerPage),\n    fetchMore: fetchMore,\n    itemsPerPage: itemsPerPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }));\n};\n\nvar getQuery = function getQuery(QUERY, params) {\n  return new _Promise(function _callee(res, rej) {\n    var data;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(axios({\n              url: \"http://localhost:4000/gql\",\n              method: \"post\",\n              data: {\n                query: GET_COUNT\n              }\n            }));\n\n          case 2:\n            data = _context.sent;\n            res(data);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  });\n};\n\nHomePage.getInitialProps = function _callee2(ctx) {\n  var resp, count;\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(getQuery(GET_COUNT));\n\n        case 2:\n          resp = _context2.sent;\n          count = resp.data.data.count;\n          return _context2.abrupt(\"return\", {\n            count: count\n          });\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n};\n\nexport default HomePage;","map":{"version":3,"sources":["/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/pages/Home/index.tsx"],"names":["React","useEffect","useState","axios","Layout","Header","FilterMenu","BottomBar","useLazyQuery","GET_COUNT","GET_ALL_PROGRAMS","HomePage","count","itemsPerPage","page","setPage","variables","offset","limit","fetchPolicy","getAllPrograms","loading","data","fetchMore","allPrograms","console","log","Math","ceil","getQuery","QUERY","params","res","rej","url","method","query","getInitialProps","ctx","resp"],"mappings":"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","sourcesContent":["\nimport React, {useEffect, useState} from 'react';\nimport axios from 'axios'\nimport Layout from '../../components/Layout/Layout'\nimport Header from '../../components/Header/Header'\nimport FilterMenu from '../../components/FilterMenu/FilterMenu'\nimport BottomBar from '../../components/BottomBar/BottomBar'\nimport {useLazyQuery} from '@apollo/react-hooks'\nimport {GET_COUNT, GET_ALL_PROGRAMS} from '../../graphQL/queries'\n\nimport ProgramContainer from '../../components/ProgramContainer/ProgramContainer'\n\ntype HomePageProps = {\n  getInitialProps: Function\n  count: number\n}\n\ninterface HomePageInterface<HomePageProps> extends React.FC<HomePageProps> {\n  getInitialProps?: (ctx: any) => Promise<any>\n}\n\nconst HomePage: HomePageInterface<HomePageProps> = ({count}) => {\n  const itemsPerPage = 10\n  const [page, setPage] = useState(1)\n  \n  const [getAllPrograms, {loading, data, fetchMore}] = useLazyQuery(GET_ALL_PROGRAMS, {\n    variables: {\n      offset: page-1,\n      limit: 10\n    },\n    fetchPolicy: \"cache-and-network\"\n  })\n\n  useEffect(()=>{\n    getAllPrograms()\n  }, [])\n\n  if(data && data.allPrograms){\n   console.log(data.allPrograms)\n  }\n\n  \n\n  return (\n    <Layout>\n    <Header />\n    <FilterMenu />\n    {/* <ProgramContainer /> */}\n    <BottomBar \n      page={page} \n      setPage={setPage} \n      numberOfPages={Math.ceil(count / itemsPerPage)}\n      fetchMore={fetchMore} \n      itemsPerPage={itemsPerPage}\n      />\n  </Layout>\n  )\n}\n\nconst getQuery = (QUERY, params?) => new Promise(async (res, rej)=> {\n  const data:any = await axios({\n    url: \"http://localhost:4000/gql\",\n    method: \"post\",\n    data: {\n      query: GET_COUNT\n    }\n  })\n  res(data)\n})\n\nHomePage.getInitialProps = async(ctx) => {\n  \n  let resp:any = await getQuery(GET_COUNT)\n  const count = resp.data.data.count\n\n  return {count}\n}\n\n\nexport default HomePage;\n"]},"metadata":{},"sourceType":"module"}