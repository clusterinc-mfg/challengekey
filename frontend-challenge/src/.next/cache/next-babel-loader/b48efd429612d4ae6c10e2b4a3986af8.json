{"ast":null,"code":"import gql from 'graphql-tag'; // TODO: Write GraphQL Queries\n\n/*\n    PROGRAM_SEARCH:\n        Create a named export called PROGRAM_SEARCH.  \n        this should contain a query called programSearch.\n        the query should take in one parameter called data.\n        data should have the type ProgramSearchTermInput\n\n        this query should return the count, and a list of programs\n        from the programs, it should retrieve id, name, degreeType, \n        deliveryMode, requiredCredits costPerCredit, and school.  \n        From the school it should retrieve name, schoolLogo, \n        totalEnrollment, and schoolType.\n\n    GET_PROGRAM:\n        Create a named export called GET_PROGRAM.\n        this should contain a query called program.\n        the query should take in one parameter called data.\n        data should have the type ProgramInput.\n\n        this query should return the following fields: id, \n        name, costPerCredit, programUrl, programDescription,\n        degreeType, requiredCredits, deliveryMode, and school.\n        From the school, it should return the following fields:\n        name, schoolLogo, backgroundColor, gradientColor, \n        schoolDescription, and schoolType\n*/\n\nexport const PROGRAM_SEARCH = gql`\n    query programSearch($data: ProgramSearchTermInput) {\n        programSearch(data: $data){\n        count\n        programs {\n            id\n            name\n            degreeType\n            deliveryMode\n            requiredCredits\n            costPerCredit\n            school{\n                name\n                schoolLogo\n                totalEnrollment\n                schoolType\n            }\n        }\n    }\n}\n`;\nexport const GET_PROGRAM = gql`\n    query program($data: ProgramInput){\n        program(data: $data){\n            id\n            name\n            costPerCredit\n            programUrl\n            programDescription\n            degreeType\n            requiredCredits\n            deliveryMode\n            school {\n                name\n                schoolLogo\n                backgroundColor\n                gradientColor\n                schoolDescription\n                schoolType\n            }\n        }\n    }\n`;","map":{"version":3,"sources":["/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/graphQL/queries.ts"],"names":["gql","PROGRAM_SEARCH","GET_PROGRAM"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,aAAhB,C,CAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,OAAO,MAAMC,cAAc,GAAGD,GAAI;;;;;;;;;;;;;;;;;;;;CAA3B;AAuBP,OAAO,MAAME,WAAW,GAAGF,GAAI;;;;;;;;;;;;;;;;;;;;;CAAxB","sourcesContent":["import gql from 'graphql-tag';\n\n// TODO: Write GraphQL Queries\n/*\n    PROGRAM_SEARCH:\n        Create a named export called PROGRAM_SEARCH.  \n        this should contain a query called programSearch.\n        the query should take in one parameter called data.\n        data should have the type ProgramSearchTermInput\n\n        this query should return the count, and a list of programs\n        from the programs, it should retrieve id, name, degreeType, \n        deliveryMode, requiredCredits costPerCredit, and school.  \n        From the school it should retrieve name, schoolLogo, \n        totalEnrollment, and schoolType.\n\n    GET_PROGRAM:\n        Create a named export called GET_PROGRAM.\n        this should contain a query called program.\n        the query should take in one parameter called data.\n        data should have the type ProgramInput.\n\n        this query should return the following fields: id, \n        name, costPerCredit, programUrl, programDescription,\n        degreeType, requiredCredits, deliveryMode, and school.\n        From the school, it should return the following fields:\n        name, schoolLogo, backgroundColor, gradientColor, \n        schoolDescription, and schoolType\n*/\n\n\nexport const PROGRAM_SEARCH = gql`\n    query programSearch($data: ProgramSearchTermInput) {\n        programSearch(data: $data){\n        count\n        programs {\n            id\n            name\n            degreeType\n            deliveryMode\n            requiredCredits\n            costPerCredit\n            school{\n                name\n                schoolLogo\n                totalEnrollment\n                schoolType\n            }\n        }\n    }\n}\n`\n\n\nexport const GET_PROGRAM = gql`\n    query program($data: ProgramInput){\n        program(data: $data){\n            id\n            name\n            costPerCredit\n            programUrl\n            programDescription\n            degreeType\n            requiredCredits\n            deliveryMode\n            school {\n                name\n                schoolLogo\n                backgroundColor\n                gradientColor\n                schoolDescription\n                schoolType\n            }\n        }\n    }\n`"]},"metadata":{},"sourceType":"module"}