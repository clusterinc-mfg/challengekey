{"ast":null,"code":"var _jsxFileName = \"/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/components/BottomBar/BottomBar.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { Container, Spacer, Button, ButtonContainer } from './BottomBar.styles';\n\nconst BottomBar = ({\n  count,\n  page,\n  setPage,\n  itemsPerPage\n}) => {\n  const {\n    0: active,\n    1: setActive\n  } = useState(1);\n\n  const updatePage = number => {\n    setPage(number);\n    setActive(number);\n  };\n\n  const renderButtons = () => {\n    const numberOfPages = Math.ceil(count / itemsPerPage);\n    let buttons = [];\n\n    const moveBack = () => {\n      updatePage(page - 1);\n    };\n\n    const moveForward = () => {\n      updatePage(page + 1);\n    };\n\n    const numberOfButtons = active + 3 > numberOfPages ? numberOfPages - active : 3;\n\n    for (let i = Math.min(active, numberOfPages - 3); i <= Math.min(active - 1 + numberOfButtons, numberOfPages - 1); i++) {\n      if (i >= 1) {\n        buttons.push(i);\n      }\n    }\n\n    if (numberOfPages > 4 && active < numberOfPages - 3) {\n      buttons[buttons.length - 1] === numberOfPages - 1 ? null : buttons.push(null);\n    }\n\n    buttons.push(numberOfPages);\n    buttons = buttons.map((pageNumber, i) => pageNumber ? __jsx(Button, {\n      key: pageNumber,\n      onClick: () => {\n        updatePage(pageNumber);\n      },\n      isActive: pageNumber === active,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, pageNumber) : __jsx(Spacer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"...\"));\n\n    if (page !== 1) {\n      buttons.unshift(__jsx(Button, {\n        key: \"prev\",\n        onClick: () => {\n          moveBack();\n        },\n        isEnd: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \" \", \"< Prev\"));\n    }\n\n    if (numberOfPages > 1 && active !== numberOfPages) {\n      buttons.push(__jsx(Button, {\n        key: \"next\",\n        onClick: () => {\n          moveForward();\n        },\n        isEnd: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"Next >\"));\n    }\n\n    return buttons;\n  };\n\n  return __jsx(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, __jsx(ButtonContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, renderButtons()));\n};\n\nexport default BottomBar;","map":{"version":3,"sources":["/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/components/BottomBar/BottomBar.tsx"],"names":["React","useState","Container","Spacer","Button","ButtonContainer","BottomBar","count","page","setPage","itemsPerPage","active","setActive","updatePage","number","renderButtons","numberOfPages","Math","ceil","buttons","moveBack","moveForward","numberOfButtons","i","min","push","length","map","pageNumber","unshift"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\n\nimport {Container, Spacer, Button, ButtonContainer} from './BottomBar.styles'\n\n\n\n\n\n\nconst BottomBar = ({count, page, setPage, itemsPerPage}) => {\n\n    const [active, setActive] = useState(1)\n\n    const updatePage = (number) => {\n      setPage(number)\n      setActive(number)\n    }\n\n    const renderButtons = () => {\n        const numberOfPages = Math.ceil(count / itemsPerPage)\n        let buttons = []\n\n        const moveBack = () => {\n          updatePage(page - 1)\n        }\n        const moveForward = () => {\n          updatePage(page + 1)\n        }\n\n        const numberOfButtons = active + 3 > numberOfPages ? numberOfPages - active : 3;\n\n        for (\n          let i = Math.min(active, numberOfPages - 3);\n          i <= Math.min(active-1 + numberOfButtons, numberOfPages - 1);\n          i++\n        ) {\n          if (i >= 1) {\n            buttons.push(i);\n          }\n        }\n    \n        if(numberOfPages > 4 && active < numberOfPages - 3){\n            buttons[buttons.length - 1] === numberOfPages - 1 ? null : buttons.push(null);\n        }\n        \n        buttons.push(numberOfPages);\n\n        buttons = buttons.map((pageNumber, i) =>\n          pageNumber ? (\n            <Button\n              key={pageNumber}\n              onClick={() => { updatePage(pageNumber) }}\n                isActive={pageNumber === active}\n            >\n              {pageNumber}\n            </Button>\n          ) : (\n            <Spacer>...</Spacer>\n          )\n        );\n\n\n        if(page !== 1){ buttons.unshift( <Button key={\"prev\"} onClick={ ()=>{moveBack()} } isEnd> {\"< Prev\"}</Button> ) }\n        if(numberOfPages > 1 && active !== numberOfPages) { buttons.push( <Button key={\"next\"} onClick={ ()=>{moveForward()} } isEnd>{\"Next >\"}</Button>)   }\n        \n        return buttons\n    }\n\n\n    return(\n        <Container>\n            <ButtonContainer>\n                {renderButtons()}\n            </ButtonContainer>\n        </Container>\n    )\n}\n\nexport default BottomBar"]},"metadata":{},"sourceType":"module"}