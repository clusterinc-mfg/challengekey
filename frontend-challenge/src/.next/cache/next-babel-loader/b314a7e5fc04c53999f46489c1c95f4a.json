{"ast":null,"code":"var _jsxFileName = \"/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/pages/HomePage/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Layout from '../../components/Layout/Layout';\nimport FilterMenu from '../../components/FilterMenu/FilterMenu';\nimport BottomBar from '../../components/BottomBar/BottomBar';\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport { PROGRAM_SEARCH } from '../../graphQL/queries';\nimport { Spinner } from '../../components/Spinner/Spinner';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { ResultsHeader, ProgramContainer } from './HomePage.styles';\nimport ProgramRow from '../../components/ProgramRow/ProgramRow';\n\nconst renderProgramContainer = (programs, count, term = null) => {\n  const renderPrograms = programs => {\n    return programs.map((program, i) => __jsx(ProgramRow, {\n      key: program.id + program.name + i,\n      program: program,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }));\n  };\n\n  const renderHeader = (count, term) => term ? `${count} items found for ${term}` : `${count} items found`;\n\n  return __jsx(ProgramContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, __jsx(ResultsHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, renderHeader(count, term)), renderPrograms(programs));\n};\n\nconst HomePage = () => {\n  let count = 0;\n  let programs = [];\n  const itemsPerPage = 10;\n  const {\n    0: page,\n    1: setPage\n  } = useState(1);\n  const term = useSelector(state => state.term, shallowEqual);\n  const sort = useSelector(state => state.sort, shallowEqual);\n  const filter = useSelector(state => state.filter, shallowEqual);\n  let variables = {\n    data: {\n      offset: (page - 1) * itemsPerPage,\n      limit: itemsPerPage,\n      term,\n      sort,\n      filter\n    }\n  };\n  const [exec, {\n    loading,\n    data\n  }] = useLazyQuery(PROGRAM_SEARCH, {\n    variables\n  });\n  useEffect(() => {\n    exec();\n  }, [exec]);\n\n  if (data) {\n    count = data.programSearch.count;\n    programs = data.programSearch.programs;\n  }\n\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, __jsx(FilterMenu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), !data ? __jsx(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }) : renderProgramContainer(programs, count, term), __jsx(BottomBar, {\n    count: count,\n    page: page,\n    setPage: setPage,\n    itemsPerPage: itemsPerPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }));\n};\n\nexport default HomePage;","map":{"version":3,"sources":["/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/pages/HomePage/index.tsx"],"names":["React","useState","useEffect","Layout","FilterMenu","BottomBar","useLazyQuery","PROGRAM_SEARCH","Spinner","useSelector","shallowEqual","ResultsHeader","ProgramContainer","ProgramRow","renderProgramContainer","programs","count","term","renderPrograms","map","program","i","id","name","renderHeader","HomePage","itemsPerPage","page","setPage","state","sort","filter","variables","data","offset","limit","exec","loading","programSearch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Layout from '../../components/Layout/Layout';\nimport FilterMenu from '../../components/FilterMenu/FilterMenu';\nimport BottomBar from '../../components/BottomBar/BottomBar';\nimport { useQuery, useLazyQuery } from '@apollo/react-hooks';\nimport { PROGRAM_SEARCH } from '../../graphQL/queries';\nimport { Spinner } from '../../components/Spinner/Spinner';\nimport {useSelector, shallowEqual} from 'react-redux'\nimport { ResultsHeader , ProgramContainer} from './HomePage.styles'\nimport ProgramRow from '../../components/ProgramRow/ProgramRow';\n\n\ntype HomePageProps = {\n  getInitialProps: Function;\n};\n\ninterface HomePageInterface<HomePageProps> extends React.FC<HomePageProps> {\n  getInitialProps?: (ctx: any) => Promise<any>;\n}\n\n\n\nconst renderProgramContainer = (programs, count, term=null) => {\n\n  const renderPrograms = programs => {\n    return programs.map((program, i) => <ProgramRow key={program.id + program.name + i} program={program} />);\n  };\n  \n  const renderHeader = (count, term) => term ? `${count} items found for ${term}` :`${count} items found` \n\n  return (\n    <ProgramContainer>\n    <ResultsHeader>{renderHeader(count, term)}</ResultsHeader> \n        {renderPrograms(programs)}\n    </ProgramContainer>\n  )\n}\n\n\nconst HomePage: HomePageInterface<HomePageProps> = () => {\n  let count = 0\n  let programs = []\n  const itemsPerPage = 10;\n  const [page, setPage] = useState(1);\n\n  const term = useSelector((state:any) => state.term, shallowEqual )\n  const sort = useSelector((state:any) => state.sort, shallowEqual )\n  const filter = useSelector((state:any) => state.filter, shallowEqual )\n\n\n  let variables = {\n      data: {\n        offset: (page-1) * itemsPerPage,\n        limit: itemsPerPage,\n        term, sort, filter\n      }\n    }\n\n  const [exec, { loading, data }] = useLazyQuery(\n    PROGRAM_SEARCH, { variables });\n\n  useEffect(()=>{\n      exec()\n  },[exec])\n\n  if(data){\n    count = data.programSearch.count\n    programs = data.programSearch.programs\n  }\n\n  return (\n    <Layout >\n      <FilterMenu />\n      { !data  ? <Spinner /> : renderProgramContainer(programs,count,term) }\n      <BottomBar count={count} page={page} setPage={setPage} itemsPerPage={itemsPerPage}/>\n    </Layout>\n  );\n};\n\nexport default HomePage;\n"]},"metadata":{},"sourceType":"module"}