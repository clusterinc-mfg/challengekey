{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nvar _jsxFileName = \"/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/pages/programDetail/index.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\nimport { withRouter } from 'next/router';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_PROGRAM } from '../../graphQL/queries';\nimport Layout from '../../components/Layout/Layout';\nimport { Spinner } from '../../components/Spinner/Spinner';\nimport SchoolBanner from '../../components/SchoolBanner/SchoolBanner';\nimport ProgramInfoBanner from '../../components/ProgramInfoBanner/ProgramInfoBanner';\nimport ProgramInfo from '../../components/ProgramInfo/ProgramInfo';\n\nvar calcDeliveryModeColor = function calcDeliveryModeColor(deliveryMode, color1, color2) {\n  var splitHex = function splitHex(hex) {\n    return hex.length === 4 ? hex.slice(1, 4).split('').map(function (el) {\n      return el + el;\n    }) : [hex.substr(1, 2), hex.substr(3, 2), hex.substr(5, 2)];\n  };\n\n  var splitColor1 = splitHex(color1).map(function (el) {\n    return _parseInt(el, 16);\n  });\n  var splitColor2 = splitHex(color2).map(function (el) {\n    return _parseInt(el, 16);\n  });\n  var percent = deliveryMode.match(/d/) / 100;\n  var color = splitColor1.map(function (el, i) {\n    return Math.ceil((el + splitColor2[i]) * (1 - percent)).toString(16);\n  }).join('');\n  return color;\n};\n\nvar renderBody = function renderBody(_ref) {\n  var name = _ref.name,\n      costPerCredit = _ref.costPerCredit,\n      programUrl = _ref.programUrl,\n      programDescription = _ref.programDescription,\n      deliveryMode = _ref.deliveryMode,\n      school = _ref.school;\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, __jsx(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, __jsx(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, name)), __jsx(SchoolBanner, {\n    school: school,\n    name: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), __jsx(ProgramInfoBanner, {\n    deliveryModeColor: calcDeliveryModeColor(deliveryMode, '#FF0000', '#0000FF'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), __jsx(ProgramInfo, {\n    programDescription: programDescription,\n    schoolDescription: school.schoolDescription,\n    schoolName: school.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }));\n};\n\nvar SchoolPage = function SchoolPage(_ref2) {\n  var router = _ref2.router;\n\n  var _useQuery = useQuery(GET_PROGRAM, {\n    variables: {\n      data: {\n        id: router.query.id\n      }\n    }\n  }),\n      loading = _useQuery.loading,\n      data = _useQuery.data;\n\n  return __jsx(React.Fragment, null, __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, loading ? __jsx(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }) : renderBody(data.program)));\n};\n\nexport default withRouter(SchoolPage);","map":{"version":3,"sources":["/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/pages/programDetail/index.tsx"],"names":["React","Head","withRouter","useQuery","GET_PROGRAM","Layout","Spinner","SchoolBanner","ProgramInfoBanner","ProgramInfo","calcDeliveryModeColor","deliveryMode","color1","color2","splitHex","hex","length","slice","split","map","el","substr","splitColor1","splitColor2","percent","match","color","i","Math","ceil","toString","join","renderBody","name","costPerCredit","programUrl","programDescription","school","schoolDescription","SchoolPage","router","variables","data","id","query","loading","program"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Head from 'next/head';\nimport { withRouter } from 'next/router';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_PROGRAM } from '../../graphQL/queries';\nimport Layout from '../../components/Layout/Layout';\nimport { Spinner } from '../../components/Spinner/Spinner';\n\nimport SchoolBanner from '../../components/SchoolBanner/SchoolBanner';\nimport ProgramInfoBanner from '../../components/ProgramInfoBanner/ProgramInfoBanner';\nimport ProgramInfo from '../../components/ProgramInfo/ProgramInfo';\n\nconst calcDeliveryModeColor = (deliveryMode, color1, color2) => {\n  const splitHex = hex =>\n    hex.length === 4\n      ? hex\n          .slice(1, 4)\n          .split('')\n          .map(el => el + el)\n      : [hex.substr(1, 2), hex.substr(3, 2), hex.substr(5, 2)];\n\n  let splitColor1 = splitHex(color1).map(el => parseInt(el, 16));\n  let splitColor2 = splitHex(color2).map(el => parseInt(el, 16));\n  let percent = deliveryMode.match(/d/) / 100;\n\n  let color = (\n    splitColor1\n      .map((el, i) =>\n        Math.ceil((el + splitColor2[i]) * (1 - percent)).toString(16),\n      )\n      .join('')\n  );\n  return color\n};\n\nconst renderBody = ({\n  name,\n  costPerCredit,\n  programUrl,\n  programDescription,\n  deliveryMode,\n  school,\n}) => {\n  return (\n    <div>\n      <Head>\n        <title>{name}</title>\n      </Head>\n      <SchoolBanner school={school} name={name} />\n      <ProgramInfoBanner\n        deliveryModeColor={calcDeliveryModeColor(deliveryMode,'#FF0000', '#0000FF')}\n      />\n      <ProgramInfo\n        programDescription={programDescription}\n        schoolDescription={school.schoolDescription}\n        schoolName={school.name}\n      />\n    </div>\n  );\n};\n\nconst SchoolPage = ({ router }) => {\n  const { loading, data } = useQuery(GET_PROGRAM, {\n    variables: {\n      data: { id: router.query.id },\n    },\n  });\n\n  return (\n    <>\n      <Layout>{loading ? <Spinner /> : renderBody(data.program)}</Layout>\n    </>\n  );\n};\n\nexport default withRouter(SchoolPage);\n"]},"metadata":{},"sourceType":"module"}