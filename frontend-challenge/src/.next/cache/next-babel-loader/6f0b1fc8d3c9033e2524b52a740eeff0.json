{"ast":null,"code":"var _jsxFileName = \"/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/components/ProgramContainer/ProgramContainer.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Wrapper, ResultsHeader } from './ProgramContainer.styles';\nimport ProgramRow from '../ProgramRow/ProgramRow';\n\nconst renderPrograms = programs => {\n  return programs.map(program => __jsx(ProgramRow, {\n    program: program,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }));\n};\n\nconst renderHeader = (count, term) => term ? `${count} items found for ${term}` : `${count} items found`;\n\nclass ProgramContainer extends React.Component {\n  render() {\n    return __jsx(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, __jsx(ResultsHeader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, renderHeader(count.count, term)));\n  }\n\n} // const ProgramContainer = (count , programs, term=null) => {\n//   const [s, setS] = useState(programs)\n//   return(<Wrapper>\n//     <ResultsHeader>{renderHeader(count.count, term)}</ResultsHeader>\n//     {/* {renderPrograms(programs)} */}\n//   </Wrapper>)\n// };\n// export default ProgramContainer;","map":{"version":3,"sources":["/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/components/ProgramContainer/ProgramContainer.tsx"],"names":["React","Wrapper","ResultsHeader","ProgramRow","renderPrograms","programs","map","program","renderHeader","count","term","ProgramContainer","Component","render"],"mappings":";;AAAA,OAAOA,KAAP,MAA8B,OAA9B;AAEA,SAASC,OAAT,EAAkBC,aAAlB,QAAuC,2BAAvC;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;AAEA,MAAMC,cAAc,GAAGC,QAAQ,IAAI;AACjC,SAAOA,QAAQ,CAACC,GAAT,CAAaC,OAAO,IAAI,MAAC,UAAD;AAAY,IAAA,OAAO,EAAEA,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAxB,CAAP;AACD,CAFD;;AAIA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiBA,IAAI,GAAI,GAAED,KAAM,oBAAmBC,IAAK,EAApC,GAAwC,GAAED,KAAM,cAA1F;;AAEA,MAAME,gBAAN,SAA+BX,KAAK,CAACY,SAArC,CAA+C;AAE7CC,EAAAA,MAAM,GAAE;AACR,WACI,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgBL,YAAY,CAACC,KAAK,CAACA,KAAP,EAAcC,IAAd,CAA5B,CADF,CADJ;AAKE;;AAR2C,C,CAY/C;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, {useState} from 'react';\n\nimport { Wrapper, ResultsHeader } from './ProgramContainer.styles';\nimport ProgramRow from '../ProgramRow/ProgramRow';\n\nconst renderPrograms = programs => {\n  return programs.map(program => <ProgramRow program={program} />);\n};\n\nconst renderHeader = (count, term) => term ? `${count} items found for ${term}` :`${count} items found` \n\nclass ProgramContainer extends React.Component {\n\n  render(){\n  return (\n      <Wrapper>\n        <ResultsHeader>{renderHeader(count.count, term)}</ResultsHeader>\n        {/* {renderPrograms(programs)} */}\n      </Wrapper>\n  )}\n}\n\n\n// const ProgramContainer = (count , programs, term=null) => {\n\n//   const [s, setS] = useState(programs)\n\n\n//   return(<Wrapper>\n//     <ResultsHeader>{renderHeader(count.count, term)}</ResultsHeader>\n//     {/* {renderPrograms(programs)} */}\n//   </Wrapper>)\n// };\n\n// export default ProgramContainer;\n"]},"metadata":{},"sourceType":"module"}