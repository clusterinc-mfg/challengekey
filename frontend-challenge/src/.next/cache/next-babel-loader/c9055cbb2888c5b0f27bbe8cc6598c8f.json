{"ast":null,"code":"import nextReduxSaga from 'next-redux-saga';\nimport withRedux from 'next-redux-wrapper';\nimport { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from './rootReducer';\nimport rootSaga from './rootSaga';\nvar persistConfig = {\n  key: 'nextjs',\n  whitelist: [],\n  storage: storage\n};\n\nvar configureStore = function configureStore() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      isServer = _ref.isServer;\n\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware];\n\n  if (!isServer) {\n    middlewares.push(logger);\n  }\n\n  var reducer = isServer ? rootReducer : persistReducer(persistConfig, rootReducer);\n  var store = createStore(reducer, initialState, applyMiddleware.apply(void 0, middlewares));\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n\n  if (!isServer) {\n    store.__persistor = persistStore(store);\n  }\n\n  return store;\n};\n\nexport default (function (BaseComponent) {\n  return withRedux(configureStore)(nextReduxSaga(BaseComponent));\n});","map":null,"metadata":{},"sourceType":"module"}