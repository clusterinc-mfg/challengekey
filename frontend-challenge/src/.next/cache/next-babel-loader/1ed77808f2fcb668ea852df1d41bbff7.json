{"ast":null,"code":"var _jsxFileName = \"/Users/bradtudor/Documents/interview_challenges/frontend-challenge key/src/pages/programDetail/index.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\n/*\n  import necessary items\n*/\n\nimport { withRouter } from 'next/router';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_PROGRAM } from '../../graphQL/queries';\nimport Layout from '../../components/Layout/Layout';\nimport { Spinner } from '../../components/Spinner/Spinner';\nimport SchoolBanner from '../../components/SchoolBanner/SchoolBanner';\nimport ProgramInfoBanner from '../../components/ProgramInfoBanner/ProgramInfoBanner';\nimport ProgramInfo from '../../components/ProgramInfo/ProgramInfo'; //TODO: Build the School Page page\n\n/* \n  renderBody:\n    * should set the title of the page to the name of the program\n  \n  SchoolPage:\n    * the contents of the page should be wrapped in the layout component\n    * should trigger the GET_PROGRAM query when loaded\n      the route for the school page should contain the query parameter \"id\"\n    * while the query is loading, the page should display the Spinner\n*/\n\nvar renderBody = function renderBody(_ref) {\n  var name = _ref.name,\n      programDescription = _ref.programDescription,\n      deliveryMode = _ref.deliveryMode,\n      degreeType = _ref.degreeType,\n      school = _ref.school,\n      costPerCredit = _ref.costPerCredit,\n      requiredCredits = _ref.requiredCredits;\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, __jsx(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, name)), __jsx(SchoolBanner, {\n    school: school,\n    name: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), __jsx(ProgramInfoBanner, {\n    costPerCredit: costPerCredit,\n    requiredCredits: requiredCredits,\n    schoolType: school.schoolType,\n    deliveryMode: deliveryMode,\n    degreeType: degreeType,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), __jsx(ProgramInfo, {\n    programDescription: programDescription,\n    schoolDescription: school.schoolDescription,\n    schoolName: school.name,\n    costPerCredit: costPerCredit,\n    requiredCredits: requiredCredits,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }));\n};\n\nvar SchoolPage = function SchoolPage(_ref2) {\n  var router = _ref2.router;\n\n  // trigger the GET_PROGRAM query as soon as the page appears\n  var _useQuery = useQuery(GET_PROGRAM, {\n    variables: {\n      data: {\n        id: router.query.id\n      }\n    }\n  }),\n      loading = _useQuery.loading,\n      data = _useQuery.data;\n\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, loading ? __jsx(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }) : renderBody(data.program));\n};\n\nexport default withRouter(SchoolPage);","map":{"version":3,"sources":["/Users/bradtudor/Documents/interview_challenges/frontend-challenge key/src/pages/programDetail/index.tsx"],"names":["React","Head","withRouter","useQuery","GET_PROGRAM","Layout","Spinner","SchoolBanner","ProgramInfoBanner","ProgramInfo","renderBody","name","programDescription","deliveryMode","degreeType","school","costPerCredit","requiredCredits","schoolType","schoolDescription","SchoolPage","router","variables","data","id","query","loading","program"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA;;;;AAGA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,WAAT,QAA4B,uBAA5B;AAEA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,SAASC,OAAT,QAAwB,kCAAxB;AACA,OAAOC,YAAP,MAAyB,4CAAzB;AACA,OAAOC,iBAAP,MAA8B,sDAA9B;AACA,OAAOC,WAAP,MAAwB,0CAAxB,C,CAEA;;AACA;;;;;;;;;;;AAWA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAQb;AAAA,MAPJC,IAOI,QAPJA,IAOI;AAAA,MANJC,kBAMI,QANJA,kBAMI;AAAA,MALJC,YAKI,QALJA,YAKI;AAAA,MAJJC,UAII,QAJJA,UAII;AAAA,MAHJC,MAGI,QAHJA,MAGI;AAAA,MAFJC,aAEI,QAFJA,aAEI;AAAA,MADJC,eACI,QADJA,eACI;AAEJ,SACE,4BACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQN,IAAR,CADF,CADF,EAIE,MAAC,YAAD;AAAc,IAAA,MAAM,EAAEI,MAAtB;AAA8B,IAAA,IAAI,EAAEJ,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAKE,MAAC,iBAAD;AACE,IAAA,aAAa,EAAEK,aADjB;AAEE,IAAA,eAAe,EAAEC,eAFnB;AAGE,IAAA,UAAU,EAAEF,MAAM,CAACG,UAHrB;AAIE,IAAA,YAAY,EAAEL,YAJhB;AAKE,IAAA,UAAU,EAAEC,UALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EAYE,MAAC,WAAD;AACE,IAAA,kBAAkB,EAAEF,kBADtB;AAEE,IAAA,iBAAiB,EAAEG,MAAM,CAACI,iBAF5B;AAGE,IAAA,UAAU,EAAEJ,MAAM,CAACJ,IAHrB;AAIE,IAAA,aAAa,EAAEK,aAJjB;AAKE,IAAA,eAAe,EAAEC,eALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,CADF;AAsBD,CAhCD;;AAkCA,IAAMG,UAAU,GAAG,SAAbA,UAAa,QAAgB;AAAA,MAAbC,MAAa,SAAbA,MAAa;;AACjC;AADiC,kBAEPlB,QAAQ,CAACC,WAAD,EAAc;AAC9CkB,IAAAA,SAAS,EAAE;AACTC,MAAAA,IAAI,EAAE;AAAEC,QAAAA,EAAE,EAAEH,MAAM,CAACI,KAAP,CAAaD;AAAnB;AADG;AADmC,GAAd,CAFD;AAAA,MAEzBE,OAFyB,aAEzBA,OAFyB;AAAA,MAEhBH,IAFgB,aAEhBA,IAFgB;;AAQjC,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEGG,OAAO,GAAG,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAiBhB,UAAU,CAACa,IAAI,CAACI,OAAN,CAFrC,CADF;AAMD,CAdD;;AAgBA,eAAezB,UAAU,CAACkB,UAAD,CAAzB","sourcesContent":["import React from 'react';\nimport Head from 'next/head';\n\n/*\n  import necessary items\n*/\nimport { withRouter } from 'next/router';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_PROGRAM } from '../../graphQL/queries';\n\nimport Layout from '../../components/Layout/Layout';\nimport { Spinner } from '../../components/Spinner/Spinner';\nimport SchoolBanner from '../../components/SchoolBanner/SchoolBanner';\nimport ProgramInfoBanner from '../../components/ProgramInfoBanner/ProgramInfoBanner';\nimport ProgramInfo from '../../components/ProgramInfo/ProgramInfo';\n\n//TODO: Build the School Page page\n/* \n  renderBody:\n    * should set the title of the page to the name of the program\n  \n  SchoolPage:\n    * the contents of the page should be wrapped in the layout component\n    * should trigger the GET_PROGRAM query when loaded\n      the route for the school page should contain the query parameter \"id\"\n    * while the query is loading, the page should display the Spinner\n*/\n\nconst renderBody = ({\n  name,\n  programDescription,\n  deliveryMode,\n  degreeType,\n  school,\n  costPerCredit,\n  requiredCredits,\n}) => {\n\n  return (\n    <>\n      <Head>\n        <title>{name}</title>\n      </Head>\n      <SchoolBanner school={school} name={name} />\n      <ProgramInfoBanner\n        costPerCredit={costPerCredit}\n        requiredCredits={requiredCredits}\n        schoolType={school.schoolType}\n        deliveryMode={deliveryMode}\n        degreeType={degreeType}\n      />\n      <ProgramInfo\n        programDescription={programDescription}\n        schoolDescription={school.schoolDescription}\n        schoolName={school.name}\n        costPerCredit={costPerCredit}\n        requiredCredits={requiredCredits}\n      />\n    </>\n  );\n};\n\nconst SchoolPage = ({ router }) => {\n  // trigger the GET_PROGRAM query as soon as the page appears\n  const { loading, data } = useQuery(GET_PROGRAM, {\n    variables: {\n      data: { id: router.query.id },\n    },\n  });\n\n  return (\n    <Layout>\n      {/* render the spinner or the renderBody function */}\n      {loading ? <Spinner /> : renderBody(data.program)}\n    </Layout>\n  );\n};\n\nexport default withRouter(SchoolPage);\n"]},"metadata":{},"sourceType":"module"}