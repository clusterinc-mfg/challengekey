{"ast":null,"code":"var _jsxFileName = \"/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/pages/HomePage/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Layout from '../../components/Layout/Layout';\nimport FilterMenu from '../../components/FilterMenu/FilterMenu';\nimport BottomBar from '../../components/BottomBar/BottomBar';\nimport { useQuery } from '@apollo/react-hooks';\nimport { PROGRAM_SEARCH } from '../../graphQL/queries';\nimport { Spinner } from '../../components/Spinner/Spinner';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { ResultsHeader, ProgramContainer } from './HomePage.styles';\nimport ProgramRow from '../../components/ProgramRow/ProgramRow'; //TODO: Build the home page\n\n/*\n  The graphQL query PROGRAM_SEARCH accepts the following variables:\n  offset, limit, term, sort, and filter.  It returns two items, count & programs.\n  run the query and render out the home page.\n\n  renderProgramContainer:  \n    *finish the function renderHeader.  If a search term is present, it should return\n    \"129 Items For Engineering!\" where 129 is the number of items and engineering is the search term.\n    If the term is not present, it should return \"300 Items Found!\" where 129 is the total number of items.\n*/\n\nvar renderProgramContainer = function renderProgramContainer(programs, count) {\n  var term = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n  // Create a function to render \n  var renderPrograms = function renderPrograms(programs) {\n    return programs.map(function (program, i) {\n      return __jsx(ProgramRow, {\n        key: program.id + program.name + i,\n        program: program,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      });\n    });\n  };\n\n  var renderHeader = function renderHeader(count, term) {\n    return term ? \"\".concat(count, \" items found for \").concat(term, \"!\") : \"\".concat(count, \" items found!\");\n  };\n\n  return __jsx(ProgramContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, __jsx(ResultsHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, renderHeader(count, term)), renderPrograms(programs));\n};\n\nvar HomePage = function HomePage() {\n  var count = 0;\n  var programs = [];\n  var itemsPerPage = 10;\n\n  var _useState = useState(1),\n      page = _useState[0],\n      setPage = _useState[1];\n\n  var term = useSelector(function (state) {\n    return state.term;\n  }, shallowEqual);\n  var sort = useSelector(function (state) {\n    return state.sort;\n  }, shallowEqual);\n  var filter = useSelector(function (state) {\n    return state.filter;\n  }, shallowEqual);\n  var variables = {\n    data: {\n      offset: (page - 1) * itemsPerPage,\n      limit: itemsPerPage,\n      term: term,\n      sort: sort,\n      filter: filter\n    }\n  };\n\n  var _useQuery = useQuery(PROGRAM_SEARCH, {\n    variables: variables\n  }),\n      loading = _useQuery.loading,\n      data = _useQuery.data;\n\n  if (!loading) {\n    count = data.programSearch.count;\n    programs = data.programSearch.programs;\n  }\n\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, __jsx(FilterMenu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), loading ? __jsx(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }) : renderProgramContainer(programs, count, term), __jsx(BottomBar, {\n    count: count,\n    page: page,\n    setPage: setPage,\n    itemsPerPage: itemsPerPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }));\n};\n\nexport default HomePage;","map":{"version":3,"sources":["/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/pages/HomePage/index.tsx"],"names":["React","useState","Layout","FilterMenu","BottomBar","useQuery","PROGRAM_SEARCH","Spinner","useSelector","shallowEqual","ResultsHeader","ProgramContainer","ProgramRow","renderProgramContainer","programs","count","term","renderPrograms","map","program","i","id","name","renderHeader","HomePage","itemsPerPage","page","setPage","state","sort","filter","variables","data","offset","limit","loading","programSearch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Layout from '../../components/Layout/Layout';\nimport FilterMenu from '../../components/FilterMenu/FilterMenu';\nimport BottomBar from '../../components/BottomBar/BottomBar';\nimport { useQuery, useLazyQuery } from '@apollo/react-hooks';\nimport { PROGRAM_SEARCH } from '../../graphQL/queries';\nimport { Spinner } from '../../components/Spinner/Spinner';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { ResultsHeader, ProgramContainer } from './HomePage.styles';\nimport ProgramRow from '../../components/ProgramRow/ProgramRow';\n\n//TODO: Build the home page\n/*\n  The graphQL query PROGRAM_SEARCH accepts the following variables:\n  offset, limit, term, sort, and filter.  It returns two items, count & programs.\n  run the query and render out the home page.\n\n  renderProgramContainer:  \n    *finish the function renderHeader.  If a search term is present, it should return\n    \"129 Items For Engineering!\" where 129 is the number of items and engineering is the search term.\n    If the term is not present, it should return \"300 Items Found!\" where 129 is the total number of items.\n*/\n\ntype HomePageProps = {\n  getInitialProps: Function;\n};\n\ninterface HomePageInterface<HomePageProps> extends React.FC<HomePageProps> {\n  getInitialProps?: (ctx: any) => Promise<any>;\n}\n\nconst renderProgramContainer = (programs, count, term = null) => {\n\n  // Create a function to render \n  const renderPrograms = programs =>\n    programs.map((program, i) => (\n      <ProgramRow key={program.id + program.name + i} program={program} />\n    ));\n\n  const renderHeader = (count, term) =>\n    term ? `${count} items found for ${term}!` : `${count} items found!`;\n\n  return (\n    <ProgramContainer>\n      <ResultsHeader>{renderHeader(count, term)}</ResultsHeader>\n      {renderPrograms(programs)}\n    </ProgramContainer>\n  );\n\n};\n\nconst HomePage: HomePageInterface<HomePageProps> = () => {\n  let count = 0;\n  let programs = [];\n  const itemsPerPage = 10;\n  const [page, setPage] = useState(1);\n\n  const term = useSelector((state: any) => state.term, shallowEqual);\n  const sort = useSelector((state: any) => state.sort, shallowEqual);\n  const filter = useSelector((state: any) => state.filter, shallowEqual);\n\n  let variables = {\n    data: {\n      offset: (page - 1) * itemsPerPage,\n      limit: itemsPerPage,\n      term,\n      sort,\n      filter,\n    },\n  };\n\n  const { loading, data } = useQuery(PROGRAM_SEARCH, { variables });\n\n  if (!loading) {\n    count = data.programSearch.count;\n    programs = data.programSearch.programs;\n  }\n\n  return (\n    <Layout>\n      <FilterMenu />\n      {loading ? <Spinner /> : renderProgramContainer(programs, count, term)}\n      <BottomBar\n        count={count}\n        page={page}\n        setPage={setPage}\n        itemsPerPage={itemsPerPage}\n      />\n    </Layout>\n  );\n};\n\nexport default HomePage;\n"]},"metadata":{},"sourceType":"module"}