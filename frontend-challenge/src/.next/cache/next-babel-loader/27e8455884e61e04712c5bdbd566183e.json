{"ast":null,"code":"var _jsxFileName = \"/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/pages/HomePage/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Layout from '../../components/Layout/Layout';\nimport FilterMenu from '../../components/FilterMenu/FilterMenu';\nimport BottomBar from '../../components/BottomBar/BottomBar';\nimport { useQuery } from '@apollo/react-hooks';\nimport { PROGRAM_SEARCH } from '../../graphQL/queries';\nimport { Spinner } from '../../components/Spinner/Spinner';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { ResultsHeader, ProgramContainer } from './HomePage.styles';\nimport ProgramRow from '../../components/ProgramRow/ProgramRow'; //TODO: Build the home page\n\n/*\n  renderProgramContainer:  \n    *   Finish the function renderHeader.  If a search term is present, it should return\n        \"129 Items For Engineering!\" where 129 is the number of items and engineering is the search term.\n        If the term is not present, it should return \"300 Items Found!\" where 129 is the total number of items.\n\n    *Render the list of programs under the results header\n\n  HomePage:\n    *  Use hooks when possible.\n\n    *  When the home page compoent renders it should trigger the PROGRAM_SEARCH query.\n       The graphQL query PROGRAM_SEARCH accepts the following variables:\n       offset, limit, term, and filter.  It returns two items, count & programs.\n       run the query and render out the home page.\n\n    *  Pull the term and filter from the redux store\n\n    *  Create a piece of state for the page vairable\n\n    *  Inside of the layout component render the FilterMenu, ProgramContainer, and BottomBar\n\n    *  If the query is loading, render the spinner.  Once is it done call the renderProgramContainer function.\n\n    *  Pass page, count, a function to update the page, and the numberOfItemsPerPage to the BottomBar\n\n    *  \n*/\n\nvar renderProgramContainer = function renderProgramContainer(programs, count) {\n  var term = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n  var renderPrograms = function renderPrograms(programs) {\n    return programs.map(function (program, i) {\n      return __jsx(ProgramRow, {\n        key: program.id + program.name + i,\n        program: program,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      });\n    });\n  };\n\n  var renderHeader = function renderHeader(count, term) {\n    return term ? \"\".concat(count, \" items found for \").concat(term, \"!\") : \"\".concat(count, \" items found!\");\n  };\n\n  return __jsx(ProgramContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, __jsx(ResultsHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, renderHeader(count, term)), renderPrograms(programs));\n};\n\nvar HomePage = function HomePage() {\n  var count = 0;\n  var programs = [];\n  var itemsPerPage = 10;\n\n  var _useState = useState(1),\n      page = _useState[0],\n      setPage = _useState[1]; // Pull the term and filter from the redux store\n\n\n  var term = useSelector(function (state) {\n    return state.term;\n  }, shallowEqual);\n  var filter = useSelector(function (state) {\n    return state.filter;\n  }, shallowEqual);\n  var variables = {\n    data: {\n      offset: (page - 1) * itemsPerPage,\n      limit: itemsPerPage,\n      term: term,\n      filter: filter\n    }\n  }; // Use the PROGRAM_SEARCH QUERY to get the count and programs list\n\n  var _useQuery = useQuery(PROGRAM_SEARCH, {\n    variables: variables\n  }),\n      loading = _useQuery.loading,\n      data = _useQuery.data;\n\n  if (!loading) {\n    count = data.programSearch.count;\n    programs = data.programSearch.programs;\n  }\n\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, __jsx(FilterMenu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }), loading ? __jsx(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }) : renderProgramContainer(programs, count, term), __jsx(BottomBar, {\n    count: count,\n    page: page,\n    setPage: setPage,\n    itemsPerPage: itemsPerPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }));\n};\n\nexport default HomePage;","map":{"version":3,"sources":["/Users/bradtudor/Documents/interview_challenges/frontend-challenge/src/pages/HomePage/index.tsx"],"names":["React","useState","Layout","FilterMenu","BottomBar","useQuery","PROGRAM_SEARCH","Spinner","useSelector","shallowEqual","ResultsHeader","ProgramContainer","ProgramRow","renderProgramContainer","programs","count","term","renderPrograms","map","program","i","id","name","renderHeader","HomePage","itemsPerPage","page","setPage","state","filter","variables","data","offset","limit","loading","programSearch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Layout from '../../components/Layout/Layout';\nimport FilterMenu from '../../components/FilterMenu/FilterMenu';\nimport BottomBar from '../../components/BottomBar/BottomBar';\nimport { useQuery, useLazyQuery } from '@apollo/react-hooks';\nimport { PROGRAM_SEARCH } from '../../graphQL/queries';\nimport { Spinner } from '../../components/Spinner/Spinner';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { ResultsHeader, ProgramContainer } from './HomePage.styles';\nimport ProgramRow from '../../components/ProgramRow/ProgramRow';\n\n//TODO: Build the home page\n/*\n  renderProgramContainer:  \n    *   Finish the function renderHeader.  If a search term is present, it should return\n        \"129 Items For Engineering!\" where 129 is the number of items and engineering is the search term.\n        If the term is not present, it should return \"300 Items Found!\" where 129 is the total number of items.\n\n    *Render the list of programs under the results header\n\n  HomePage:\n    *  Use hooks when possible.\n\n    *  When the home page compoent renders it should trigger the PROGRAM_SEARCH query.\n       The graphQL query PROGRAM_SEARCH accepts the following variables:\n       offset, limit, term, and filter.  It returns two items, count & programs.\n       run the query and render out the home page.\n\n    *  Pull the term and filter from the redux store\n\n    *  Create a piece of state for the page vairable\n\n    *  Inside of the layout component render the FilterMenu, ProgramContainer, and BottomBar\n\n    *  If the query is loading, render the spinner.  Once is it done call the renderProgramContainer function.\n\n    *  Pass page, count, a function to update the page, and the numberOfItemsPerPage to the BottomBar\n\n    *  \n*/\n\n\n\nconst renderProgramContainer = (programs, count, term = null) => {\n\n  const renderPrograms = programs =>\n    programs.map((program, i) => (\n      <ProgramRow key={program.id + program.name + i} program={program} />\n    ));\n\n  const renderHeader = (count, term) =>\n    term ? `${count} items found for ${term}!` : `${count} items found!`;\n\n  return (\n    <ProgramContainer>\n      <ResultsHeader>{renderHeader(count, term)}</ResultsHeader>\n      {/* Render the list of programs here using a function called renderPrograms */}\n      {renderPrograms(programs)}\n    </ProgramContainer>\n  );\n\n};\n\n\nconst HomePage = () => {\n\n  let count = 0;\n  let programs = [];\n  const itemsPerPage = 10; \n\n  const [page, setPage] = useState(1);\n\n  // Pull the term and filter from the redux store\n  const term = useSelector((state: any) => state.term, shallowEqual);\n  const filter = useSelector((state: any) => state.filter, shallowEqual);\n\n  let variables = {\n    data: {\n      offset: (page - 1) * itemsPerPage,\n      limit: itemsPerPage,\n      term,\n      filter\n    },\n  };\n\n  // Use the PROGRAM_SEARCH QUERY to get the count and programs list\n  const { loading, data } = useQuery(PROGRAM_SEARCH, { variables });\n\n  if (!loading) {\n    count = data.programSearch.count;\n    programs = data.programSearch.programs;\n  }\n\n\n  return (\n    <Layout>\n      {/* Add the FilterMenu, Spinner, renderProgramContainer, and BottomBar only render spinner if loading query*/}\n      <FilterMenu />\n      \n      {loading ? <Spinner /> : renderProgramContainer(programs, count, term)}\n\n      <BottomBar\n        count={count}\n        page={page}\n        setPage={setPage}\n        itemsPerPage={itemsPerPage}\n      />\n    </Layout>\n  );\n};\n\nexport default HomePage;\n"]},"metadata":{},"sourceType":"module"}